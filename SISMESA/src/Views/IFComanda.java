/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IFComanda.java
 *
 * Created on 09/09/2010, 23:26:21
 */
package Views;

import classess.GetsSets;
import classess.Utilitario;
import java.awt.event.KeyEvent;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Demir
 */
public class IFComanda extends javax.swing.JInternalFrame {

    Object[] options = {"Sim", "Não"};

    /** Creates new form IFComanda */
    public IFComanda(String mesaAberta) {
        initComponents();
        //redimenciona o lookandFeeld de acordo com o selecionado
        SwingUtilities.updateComponentTreeUI(this);
        this.pack();
        CBSituacao.setSelectedIndex(1);
        BTExcluiComada.setEnabled(false);
        BTInsereCliente.setEnabled(false);
        BTAlteraCliente.setEnabled(false);
        BTExcluiCliente.setEnabled(false);
        BTInsereProduto.setEnabled(false);
        BTAlteraProduto.setEnabled(false);
        BTExcluiProduto.setEnabled(false);
        TFMesa.setText(mesaAberta);
        PreencheHerder();

        TF_DTIni.setText(Utilitario.getDataAtual());
        TF_DTFin.setText(Utilitario.getDataAtual());

        PreencherJtableConsulta();

        DefaultTableCellRenderer CellRight = Utilitario.cellRender(0);
        TBClientes.getColumn("Valor Total").setCellRenderer(CellRight);
        TBClientes.getColumn("Valor Quitado").setCellRenderer(CellRight);
        TBClientes.getColumn("Saldo a Pagar").setCellRenderer(CellRight);

        TBProduto.getColumn("Qtde").setCellRenderer(CellRight);
        TBProduto.getColumn("Vlr Unit.").setCellRenderer(CellRight);
        TBProduto.getColumn("Vlr Total").setCellRenderer(CellRight);

        GetsSets.setJIFComanda(this);
        GetsSets.setJtfield_id_mesa(TFMesa);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu1 = new javax.swing.JPopupMenu();
        MTransferencia = new javax.swing.JMenu();
        MITransfereMesa = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        PanelMaster = new javax.swing.JPanel();
        LBFachaNomeClientes = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TBClientes = new javax.swing.JTable();
        LBFachaProdutoCliente = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBProduto = new javax.swing.JTable();
        PanelBotoesProduto = new javax.swing.JPanel();
        TFValorTotal = new javax.swing.JTextField();
        LBValorTotal = new javax.swing.JLabel();
        LBValorPago = new javax.swing.JLabel();
        TFValorPago = new javax.swing.JTextField();
        TFSaldoAPagar = new javax.swing.JTextField();
        LBSaldoPagar = new javax.swing.JLabel();
        BTAlteraProduto = new javax.swing.JButton();
        BTInsereProduto = new javax.swing.JButton();
        BTRecebimento = new javax.swing.JButton();
        BTExcluiProduto = new javax.swing.JButton();
        TFDesconto = new javax.swing.JTextField();
        TFAcrescimo = new javax.swing.JTextField();
        LBDesconto = new javax.swing.JLabel();
        LBAcrescimo = new javax.swing.JLabel();
        PanelBotoesCliente = new javax.swing.JPanel();
        BTAlteraCliente = new javax.swing.JButton();
        BTInsereCliente = new javax.swing.JButton();
        BTExcluiCliente = new javax.swing.JButton();
        PanelHederComanda = new javax.swing.JPanel();
        BTLimpaComanda = new javax.swing.JButton();
        TFMesa = new Componentes.DKJTFInteger();
        LBMesa = new javax.swing.JLabel();
        TFComanda = new javax.swing.JTextField();
        LBComanda = new javax.swing.JLabel();
        TFData = new javax.swing.JTextField();
        LBData = new javax.swing.JLabel();
        BTExcluiComada = new javax.swing.JButton();
        PMaster2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TBConsultaComanda = new javax.swing.JTable();
        LBMesaIni = new javax.swing.JLabel();
        LBMesaFin = new javax.swing.JLabel();
        LBComandaIni = new javax.swing.JLabel();
        LBComandaFin = new javax.swing.JLabel();
        LBDataIni = new javax.swing.JLabel();
        LBDataFin = new javax.swing.JLabel();
        LBSituacao = new javax.swing.JLabel();
        CBSituacao = new javax.swing.JComboBox();
        TFMesaIni = new Componentes.DKJTFInteger();
        TFMesaFin = new Componentes.DKJTFInteger();
        TFComandaIni = new Componentes.DKJTFInteger();
        TFComandaFin = new Componentes.DKJTFInteger();
        BTLimpar = new javax.swing.JButton();
        TF_DTIni = new javax.swing.JFormattedTextField();
        TF_DTFin = new javax.swing.JFormattedTextField();

        MTransferencia.setText("Transferência");

        MITransfereMesa.setText("Juntar com outro mesa");
        MITransfereMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MITransfereMesaActionPerformed(evt);
            }
        });
        MTransferencia.add(MITransfereMesa);

        jPopupMenu1.add(MTransferencia);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Cadastro de comandas");
        setMinimumSize(new java.awt.Dimension(742, 471));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(153, 153, 153));

        PanelMaster.setLayout(new java.awt.GridBagLayout());

        LBFachaNomeClientes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LBFachaNomeClientes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LBFachaNomeClientes.setText("Nomes dos clientes");
        LBFachaNomeClientes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 3, 7);
        PanelMaster.add(LBFachaNomeClientes, gridBagConstraints);

        TBClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CodCliente", "Comanda", "Nome", "Valor Total", "Valor Quitado", "Saldo a Pagar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBClientes.setSelectionBackground(new java.awt.Color(204, 255, 255));
        TBClientes.setSelectionForeground(new java.awt.Color(0, 0, 0));
        TBClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBClientesMouseClicked(evt);
            }
        });
        TBClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TBClientesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(TBClientes);
        TBClientes.getColumnModel().getColumn(0).setMinWidth(0);
        TBClientes.getColumnModel().getColumn(0).setPreferredWidth(0);
        TBClientes.getColumnModel().getColumn(0).setMaxWidth(0);
        TBClientes.getColumnModel().getColumn(1).setMinWidth(0);
        TBClientes.getColumnModel().getColumn(1).setPreferredWidth(0);
        TBClientes.getColumnModel().getColumn(1).setMaxWidth(0);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 7);
        PanelMaster.add(jScrollPane2, gridBagConstraints);

        LBFachaProdutoCliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LBFachaProdutoCliente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LBFachaProdutoCliente.setText("Produtos do cliente");
        LBFachaProdutoCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 7);
        PanelMaster.add(LBFachaProdutoCliente, gridBagConstraints);

        TBProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Comanda", "Cliente", "Produto", "Descrição", "Qtde", "Vlr Unit.", "Vlr Total", "Observação"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBProduto.setSelectionBackground(new java.awt.Color(204, 255, 255));
        TBProduto.setSelectionForeground(new java.awt.Color(0, 0, 0));
        TBProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBProdutoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TBProduto);
        TBProduto.getColumnModel().getColumn(0).setMinWidth(0);
        TBProduto.getColumnModel().getColumn(0).setPreferredWidth(0);
        TBProduto.getColumnModel().getColumn(0).setMaxWidth(0);
        TBProduto.getColumnModel().getColumn(1).setMinWidth(0);
        TBProduto.getColumnModel().getColumn(1).setPreferredWidth(0);
        TBProduto.getColumnModel().getColumn(1).setMaxWidth(0);
        TBProduto.getColumnModel().getColumn(2).setMinWidth(0);
        TBProduto.getColumnModel().getColumn(2).setPreferredWidth(0);
        TBProduto.getColumnModel().getColumn(2).setMaxWidth(0);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 3, 7);
        PanelMaster.add(jScrollPane1, gridBagConstraints);

        PanelBotoesProduto.setLayout(new java.awt.GridBagLayout());

        TFValorTotal.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        PanelBotoesProduto.add(TFValorTotal, gridBagConstraints);

        LBValorTotal.setText("Vlr Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelBotoesProduto.add(LBValorTotal, gridBagConstraints);

        LBValorPago.setText("Vlr Pago");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelBotoesProduto.add(LBValorPago, gridBagConstraints);

        TFValorPago.setEditable(false);
        TFValorPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFValorPagoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        PanelBotoesProduto.add(TFValorPago, gridBagConstraints);

        TFSaldoAPagar.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        PanelBotoesProduto.add(TFSaldoAPagar, gridBagConstraints);

        LBSaldoPagar.setText("Saldo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelBotoesProduto.add(LBSaldoPagar, gridBagConstraints);

        BTAlteraProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1287690531_27-Edit Text.png"))); // NOI18N
        BTAlteraProduto.setText("Alterar produto");
        BTAlteraProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTAlteraProdutoActionPerformed(evt);
            }
        });
        BTAlteraProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTAlteraProdutoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        PanelBotoesProduto.add(BTAlteraProduto, gridBagConstraints);

        BTInsereProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/new.png"))); // NOI18N
        BTInsereProduto.setText("Inserir produto");
        BTInsereProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTInsereProdutoActionPerformed(evt);
            }
        });
        BTInsereProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BTInsereProdutoFocusGained(evt);
            }
        });
        BTInsereProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTInsereProdutoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        PanelBotoesProduto.add(BTInsereProduto, gridBagConstraints);

        BTRecebimento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_16.png"))); // NOI18N
        BTRecebimento.setText("Recebimento");
        BTRecebimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTRecebimentoActionPerformed(evt);
            }
        });
        BTRecebimento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTRecebimentoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        PanelBotoesProduto.add(BTRecebimento, gridBagConstraints);

        BTExcluiProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/delete_16.png"))); // NOI18N
        BTExcluiProduto.setText("Excluir produto");
        BTExcluiProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTExcluiProdutoActionPerformed(evt);
            }
        });
        BTExcluiProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTExcluiProdutoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        PanelBotoesProduto.add(BTExcluiProduto, gridBagConstraints);

        TFDesconto.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelBotoesProduto.add(TFDesconto, gridBagConstraints);

        TFAcrescimo.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        PanelBotoesProduto.add(TFAcrescimo, gridBagConstraints);

        LBDesconto.setText("Desconto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelBotoesProduto.add(LBDesconto, gridBagConstraints);

        LBAcrescimo.setText("Acrescimo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelBotoesProduto.add(LBAcrescimo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 7, 7);
        PanelMaster.add(PanelBotoesProduto, gridBagConstraints);

        PanelBotoesCliente.setLayout(new java.awt.GridBagLayout());

        BTAlteraCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1287690531_27-Edit Text.png"))); // NOI18N
        BTAlteraCliente.setText("Alterar cliente");
        BTAlteraCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTAlteraClienteActionPerformed(evt);
            }
        });
        BTAlteraCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTAlteraClienteKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        PanelBotoesCliente.add(BTAlteraCliente, gridBagConstraints);

        BTInsereCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/new.png"))); // NOI18N
        BTInsereCliente.setText("Inserir cliente");
        BTInsereCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTInsereClienteActionPerformed(evt);
            }
        });
        BTInsereCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BTInsereClienteFocusGained(evt);
            }
        });
        BTInsereCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTInsereClienteKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        PanelBotoesCliente.add(BTInsereCliente, gridBagConstraints);

        BTExcluiCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/delete_16.png"))); // NOI18N
        BTExcluiCliente.setText("Excluir cliente");
        BTExcluiCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTExcluiClienteActionPerformed(evt);
            }
        });
        BTExcluiCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTExcluiClienteKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        PanelBotoesCliente.add(BTExcluiCliente, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 7);
        PanelMaster.add(PanelBotoesCliente, gridBagConstraints);

        PanelHederComanda.setComponentPopupMenu(jPopupMenu1);
        PanelHederComanda.setLayout(new java.awt.GridBagLayout());

        BTLimpaComanda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Clear-32.png"))); // NOI18N
        BTLimpaComanda.setText("Limpar comanda");
        BTLimpaComanda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTLimpaComandaActionPerformed(evt);
            }
        });
        BTLimpaComanda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTLimpaComandaKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        PanelHederComanda.add(BTLimpaComanda, gridBagConstraints);

        TFMesa.setComponentPopupMenu(jPopupMenu1);
        TFMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFMesaActionPerformed(evt);
            }
        });
        TFMesa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFMesaFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelHederComanda.add(TFMesa, gridBagConstraints);

        LBMesa.setText("Mesa");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 36;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelHederComanda.add(LBMesa, gridBagConstraints);

        TFComanda.setEditable(false);
        TFComanda.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 13);
        PanelHederComanda.add(TFComanda, gridBagConstraints);

        LBComanda.setText("Comanda");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 44;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 13);
        PanelHederComanda.add(LBComanda, gridBagConstraints);

        TFData.setEditable(false);
        TFData.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PanelHederComanda.add(TFData, gridBagConstraints);

        LBData.setText("Data");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 57;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        PanelHederComanda.add(LBData, gridBagConstraints);

        BTExcluiComada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/delete_16.png"))); // NOI18N
        BTExcluiComada.setText("Excluir comanda");
        BTExcluiComada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTExcluiComadaActionPerformed(evt);
            }
        });
        BTExcluiComada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BTExcluiComadaKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        PanelHederComanda.add(BTExcluiComada, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 0, 7);
        PanelMaster.add(PanelHederComanda, gridBagConstraints);

        jTabbedPane1.addTab("Cadastro", PanelMaster);

        PMaster2.setLayout(new java.awt.GridBagLayout());

        TBConsultaComanda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mesa", "Comanda", "Data", "Situação", "Valor Total", "Valor Pago", "Saldo a Pagar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBConsultaComanda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBConsultaComandaMouseClicked(evt);
            }
        });
        TBConsultaComanda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TBConsultaComandaKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(TBConsultaComanda);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 675;
        gridBagConstraints.ipady = 380;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        PMaster2.add(jScrollPane3, gridBagConstraints);

        LBMesaIni.setText("Mesa Inicial");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 7, 0, 0);
        PMaster2.add(LBMesaIni, gridBagConstraints);

        LBMesaFin.setText("Mena Final");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 7, 0, 0);
        PMaster2.add(LBMesaFin, gridBagConstraints);

        LBComandaIni.setText("Comanda Inicial");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 7, 0, 0);
        PMaster2.add(LBComandaIni, gridBagConstraints);

        LBComandaFin.setText("Comanda Final");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 7, 0, 0);
        PMaster2.add(LBComandaFin, gridBagConstraints);

        LBDataIni.setText("Data Inicial");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(LBDataIni, gridBagConstraints);

        LBDataFin.setText("Data Final");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(LBDataFin, gridBagConstraints);

        LBSituacao.setText("Situação");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 7, 0, 0);
        PMaster2.add(LBSituacao, gridBagConstraints);

        CBSituacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Mesa aberta", "Mesa fechada" }));
        CBSituacao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBSituacaoItemStateChanged(evt);
            }
        });
        CBSituacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CBSituacaoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 51;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(CBSituacao, gridBagConstraints);

        TFMesaIni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFMesaIniActionPerformed(evt);
            }
        });
        TFMesaIni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFMesaIniFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(TFMesaIni, gridBagConstraints);

        TFMesaFin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFMesaFinFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(TFMesaFin, gridBagConstraints);

        TFComandaIni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFComandaIniFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(TFComandaIni, gridBagConstraints);

        TFComandaFin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFComandaFinFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(TFComandaFin, gridBagConstraints);

        BTLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Clear-32.png"))); // NOI18N
        BTLimpar.setText("Limpar");
        BTLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTLimparActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 7);
        PMaster2.add(BTLimpar, gridBagConstraints);

        try {
            TF_DTIni.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TF_DTIni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TF_DTIniFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TF_DTIniFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(TF_DTIni, gridBagConstraints);

        try {
            TF_DTFin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TF_DTFin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TF_DTFinFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TF_DTFinFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        PMaster2.add(TF_DTFin, gridBagConstraints);

        jTabbedPane1.addTab("Pesquisar", PMaster2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, Short.MAX_VALUE)
        );

        setBounds(100, 50, 742, 471);
    }// </editor-fold>//GEN-END:initComponents

    private void BTAlteraClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTAlteraClienteActionPerformed
        String nomeCliente = Utilitario.getValueColumn("Nome", TBClientes);
        String id_com_clie = Utilitario.getValueColumn("CodCliente", TBClientes);
        String id_comanda = Utilitario.getValueColumn("Comanda", TBClientes);
        String id_mesa = TFMesa.getText().isEmpty() ? "" : TFMesa.getText();
        BTInsereCliente.requestFocus();
        DLCadCliComanda cadastroCliente = new DLCadCliComanda(null, true, id_comanda, id_com_clie, 2,
                nomeCliente, id_mesa, this);
        cadastroCliente.setVisible(true);


    }//GEN-LAST:event_BTAlteraClienteActionPerformed

    private void TBClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBClientesMouseClicked
        if (evt.getClickCount() > 1) {
            String nomeCliente = Utilitario.getValueColumn("Nome", TBClientes);
            String id_com_clie = Utilitario.getValueColumn("CodCliente", TBClientes);
            String id_comanda = Utilitario.getValueColumn("Comanda", TBClientes);
            String id_mesa = TFMesa.getText().isEmpty() ? "" : TFMesa.getText();

            BTInsereCliente.requestFocus();
            DLCadCliComanda cadastroCliente = new DLCadCliComanda(null, true, id_comanda, id_com_clie, 2,
                    nomeCliente, id_mesa, this);
            cadastroCliente.setVisible(true);
        }
        DesabilitaBotoesCliente();
        PreencheJtableProduto();
    }//GEN-LAST:event_TBClientesMouseClicked

    private void BTInsereClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTInsereClienteActionPerformed
        DLCadCliComanda cadastroCliente = new DLCadCliComanda(null, true, TFComanda.getText().isEmpty() ? "0" : TFComanda.getText(),
                "", 1, "", TFMesa.getText().isEmpty() ? "" : TFMesa.getText(), this);
        cadastroCliente.setVisible(true);
    }//GEN-LAST:event_BTInsereClienteActionPerformed

    private void BTAlteraProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTAlteraProdutoActionPerformed
        String comanda = Utilitario.getValueColumn("Comanda", TBProduto);
        String cliente = Utilitario.getValueColumn("Cliente", TBProduto);
        String produto = Utilitario.getValueColumn("Produto", TBProduto);
        DLCadProdComanda cadastroProduto = new DLCadProdComanda(null, true, Integer.parseInt(comanda), Integer.parseInt(cliente), Integer.parseInt(produto), 2, this);
        cadastroProduto.setVisible(true);
        BTInsereProduto.requestFocus();
    }//GEN-LAST:event_BTAlteraProdutoActionPerformed

    private void BTInsereProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTInsereProdutoActionPerformed
        String comanda = Utilitario.getValueColumn("Comanda", TBClientes);
        String cliente = Utilitario.getValueColumn("CodCliente", TBClientes);
        DLCadProdComanda cadastroProduto = new DLCadProdComanda(null, true, Integer.parseInt(comanda), Integer.parseInt(cliente), 0, 1, this);
        cadastroProduto.setVisible(true);
    }//GEN-LAST:event_BTInsereProdutoActionPerformed

    private void TBProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBProdutoMouseClicked
        if (evt.getClickCount() > 1) {
            String comanda = Utilitario.getValueColumn("Comanda", TBProduto);
            String cliente = Utilitario.getValueColumn("Cliente", TBProduto);
            String produto = Utilitario.getValueColumn("Produto", TBProduto);
            DLCadProdComanda cadastroProduto = new DLCadProdComanda(null, true, Integer.parseInt(comanda), Integer.parseInt(cliente), Integer.parseInt(produto), 2, this);
            cadastroProduto.setVisible(true);
            BTInsereProduto.requestFocus();
        }
        DesabilitaBotoesProduto();
    }//GEN-LAST:event_TBProdutoMouseClicked

    private void BTLimpaComandaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTLimpaComandaActionPerformed
        LimparCamposHerder();
    }//GEN-LAST:event_BTLimpaComandaActionPerformed

    private void BTExcluiComadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTExcluiComadaActionPerformed
        DeletaComanda();
    }//GEN-LAST:event_BTExcluiComadaActionPerformed

    private void BTInsereClienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BTInsereClienteFocusGained
//        PreencherJtableCliente(TFComanda.getText().isEmpty() ? "0" : TFComanda.getText(), TFMesa.getText().isEmpty() ? "0" : TFMesa.getText());
    }//GEN-LAST:event_BTInsereClienteFocusGained

    private void BTExcluiClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTExcluiClienteActionPerformed
        ExcluiCliente();
    }//GEN-LAST:event_BTExcluiClienteActionPerformed

    private void BTInsereProdutoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BTInsereProdutoFocusGained
        //   PreencheJtableProduto();
    }//GEN-LAST:event_BTInsereProdutoFocusGained

    private void TBClientesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TBClientesKeyReleased
        DesabilitaBotoesCliente();
        PreencheJtableProduto();
    }//GEN-LAST:event_TBClientesKeyReleased

    private void BTExcluiProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTExcluiProdutoActionPerformed
        ExcluiProduto();
    }//GEN-LAST:event_BTExcluiProdutoActionPerformed

    private void BTLimpaComandaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTLimpaComandaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            LimparCamposHerder();
        }
    }//GEN-LAST:event_BTLimpaComandaKeyPressed

    private void BTExcluiComadaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTExcluiComadaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            DeletaComanda();
        }
    }//GEN-LAST:event_BTExcluiComadaKeyPressed

    private void BTInsereClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTInsereClienteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            DLCadCliComanda cadastroCliente = new DLCadCliComanda(null, true, TFComanda.getText().isEmpty() ? "0" : TFComanda.getText(),
                    "", 1, "", TFMesa.getText().isEmpty() ? "" : TFMesa.getText(), this);
            cadastroCliente.setVisible(true);
        }
    }//GEN-LAST:event_BTInsereClienteKeyPressed

    private void BTExcluiClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTExcluiClienteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ExcluiCliente();
        }
    }//GEN-LAST:event_BTExcluiClienteKeyPressed

    private void BTAlteraClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTAlteraClienteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String nomeCliente = Utilitario.getValueColumn("Nome", TBClientes);
            String id_com_clie = Utilitario.getValueColumn("CodCliente", TBClientes);
            String id_comanda = Utilitario.getValueColumn("Comanda", TBClientes);
            String id_mesa = TFMesa.getText().isEmpty() ? "" : TFMesa.getText();

            DLCadCliComanda cadastroCliente = new DLCadCliComanda(null, true, id_comanda, id_com_clie, 2,
                    nomeCliente, id_mesa, this);
            cadastroCliente.setVisible(true);
            BTInsereCliente.requestFocus();
        }
    }//GEN-LAST:event_BTAlteraClienteKeyPressed

    private void BTInsereProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTInsereProdutoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String comanda = Utilitario.getValueColumn("Comanda", TBClientes);
            String cliente = Utilitario.getValueColumn("CodCliente", TBClientes);
            DLCadProdComanda cadastroProduto = new DLCadProdComanda(null, true, Integer.parseInt(comanda), Integer.parseInt(cliente), 0, 1, this);
            cadastroProduto.setVisible(true);
        }
    }//GEN-LAST:event_BTInsereProdutoKeyPressed

    private void BTExcluiProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTExcluiProdutoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ExcluiProduto();
        }
    }//GEN-LAST:event_BTExcluiProdutoKeyPressed

    private void BTAlteraProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTAlteraProdutoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String comanda = Utilitario.getValueColumn("Comanda", TBProduto);
            String cliente = Utilitario.getValueColumn("Cliente", TBProduto);
            String produto = Utilitario.getValueColumn("Produto", TBProduto);
            DLCadProdComanda cadastroProduto = new DLCadProdComanda(null, true, Integer.parseInt(comanda), Integer.parseInt(cliente), Integer.parseInt(produto), 2, this);
            cadastroProduto.setVisible(true);
            BTInsereProduto.requestFocus();
        }
    }//GEN-LAST:event_BTAlteraProdutoKeyPressed

    private void TFMesaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFMesaFocusLost
        int ret = PreencheHerder();
        String mesa = TFMesa.getText().isEmpty() ? "0" : TFMesa.getText();
        if (ret == 0) {
            if (!TFMesa.getText().trim().isEmpty() && TFComanda.getText().trim().isEmpty()) {
                int iresp = JOptionPane.showOptionDialog(null, "Deseja salvar essa nova comanda?", "", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, //do not use a custom Icon
                        options, //the titles of buttons
                        options[0]); //default button title
                if (iresp == 0) {
                    SalvarComanda();
                    PreencherJtableCliente(TFComanda.getText(), mesa);
                    BTInsereCliente.requestFocus();
                }
            }
        }
        PreencherJtableCliente(TFComanda.getText().isEmpty() ? "0" : TFComanda.getText(), mesa);
    }//GEN-LAST:event_TFMesaFocusLost

    private void BTRecebimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTRecebimentoActionPerformed
        String comanda = TFComanda.getText().isEmpty() ? "" : TFComanda.getText();
        String mesa = TFMesa.getText().isEmpty() ? "" : TFMesa.getText();
        String valorTotal = TFValorTotal.getText();
        if (comanda != "" && mesa != "" && valorTotal != "") {
            AtualizaQtdeAPagar();
            DLRecebimentoComanda recebimento = new DLRecebimentoComanda(null, closable, comanda, this);
            recebimento.setVisible(true);
        }

    }//GEN-LAST:event_BTRecebimentoActionPerformed

    private void BTRecebimentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BTRecebimentoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_BTRecebimentoKeyPressed

    private void TF_DTFinFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TF_DTFinFocusGained
        TF_DTFin.selectAll();
}//GEN-LAST:event_TF_DTFinFocusGained

    private void TF_DTFinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TF_DTFinFocusLost
        if (TF_DTFin.getText().replaceAll("/", "").trim().equalsIgnoreCase("")) {
            TF_DTFin.setText("00000000");
        }
        PreencherJtableConsulta();
}//GEN-LAST:event_TF_DTFinFocusLost

    private void TFMesaIniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFMesaIniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFMesaIniActionPerformed

    private void TFMesaIniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFMesaIniFocusLost
        PreencherJtableConsulta();
    }//GEN-LAST:event_TFMesaIniFocusLost

    private void TFMesaFinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFMesaFinFocusLost
        PreencherJtableConsulta();
    }//GEN-LAST:event_TFMesaFinFocusLost

    private void TFComandaIniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFComandaIniFocusLost
        PreencherJtableConsulta();
    }//GEN-LAST:event_TFComandaIniFocusLost

    private void TFComandaFinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFComandaFinFocusLost
        PreencherJtableConsulta();
    }//GEN-LAST:event_TFComandaFinFocusLost

    private void BTLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTLimparActionPerformed
        TFComandaIni.setText("");
        TFComandaFin.setText("");
        TFMesaIni.setText("");
        TFMesaFin.setText("");
        TF_DTIni.setText("00/00/0000");
        TF_DTFin.setText("00/00/0000");
        CBSituacao.setSelectedIndex(1);
        PreencherJtableConsulta();
    }//GEN-LAST:event_BTLimparActionPerformed

    private void CBSituacaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBSituacaoItemStateChanged
        PreencherJtableConsulta();
    }//GEN-LAST:event_CBSituacaoItemStateChanged

    private void CBSituacaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CBSituacaoKeyPressed
    }//GEN-LAST:event_CBSituacaoKeyPressed

    private void TBConsultaComandaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBConsultaComandaMouseClicked
        if (evt.getClickCount() > 1) {
            posicionaMesa();
        }
    }//GEN-LAST:event_TBConsultaComandaMouseClicked

    private void TBConsultaComandaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TBConsultaComandaKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            posicionaMesa();
        }
    }//GEN-LAST:event_TBConsultaComandaKeyPressed

    private void TFValorPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFValorPagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFValorPagoActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        GetsSets.setJIFComanda(null);
    }//GEN-LAST:event_formInternalFrameClosed

    private void MITransfereMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MITransfereMesaActionPerformed
        JuntarMesa();
    }//GEN-LAST:event_MITransfereMesaActionPerformed

    private void TFMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFMesaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFMesaActionPerformed

    private void TF_DTIniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TF_DTIniFocusLost
        if (TF_DTIni.getText().replaceAll("/", "").trim().equalsIgnoreCase("")) {
            TF_DTIni.setText("00000000");
        }
        PreencherJtableConsulta();
}//GEN-LAST:event_TF_DTIniFocusLost

    private void TF_DTIniFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TF_DTIniFocusGained
        TF_DTIni.selectAll();
}//GEN-LAST:event_TF_DTIniFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTAlteraCliente;
    private javax.swing.JButton BTAlteraProduto;
    private javax.swing.JButton BTExcluiCliente;
    private javax.swing.JButton BTExcluiComada;
    private javax.swing.JButton BTExcluiProduto;
    private javax.swing.JButton BTInsereCliente;
    private javax.swing.JButton BTInsereProduto;
    private javax.swing.JButton BTLimpaComanda;
    private javax.swing.JButton BTLimpar;
    private javax.swing.JButton BTRecebimento;
    private javax.swing.JComboBox CBSituacao;
    private javax.swing.JLabel LBAcrescimo;
    private javax.swing.JLabel LBComanda;
    private javax.swing.JLabel LBComandaFin;
    private javax.swing.JLabel LBComandaIni;
    private javax.swing.JLabel LBData;
    private javax.swing.JLabel LBDataFin;
    private javax.swing.JLabel LBDataIni;
    private javax.swing.JLabel LBDesconto;
    private javax.swing.JLabel LBFachaNomeClientes;
    private javax.swing.JLabel LBFachaProdutoCliente;
    private javax.swing.JLabel LBMesa;
    private javax.swing.JLabel LBMesaFin;
    private javax.swing.JLabel LBMesaIni;
    private javax.swing.JLabel LBSaldoPagar;
    private javax.swing.JLabel LBSituacao;
    private javax.swing.JLabel LBValorPago;
    private javax.swing.JLabel LBValorTotal;
    private javax.swing.JMenuItem MITransfereMesa;
    private javax.swing.JMenu MTransferencia;
    private javax.swing.JPanel PMaster2;
    private javax.swing.JPanel PanelBotoesCliente;
    private javax.swing.JPanel PanelBotoesProduto;
    private javax.swing.JPanel PanelHederComanda;
    private javax.swing.JPanel PanelMaster;
    private javax.swing.JTable TBClientes;
    private javax.swing.JTable TBConsultaComanda;
    private javax.swing.JTable TBProduto;
    private javax.swing.JTextField TFAcrescimo;
    private javax.swing.JTextField TFComanda;
    private Componentes.DKJTFInteger TFComandaFin;
    private Componentes.DKJTFInteger TFComandaIni;
    private javax.swing.JTextField TFData;
    private javax.swing.JTextField TFDesconto;
    private Componentes.DKJTFInteger TFMesa;
    private Componentes.DKJTFInteger TFMesaFin;
    private Componentes.DKJTFInteger TFMesaIni;
    private javax.swing.JTextField TFSaldoAPagar;
    private javax.swing.JTextField TFValorPago;
    private javax.swing.JTextField TFValorTotal;
    private javax.swing.JFormattedTextField TF_DTFin;
    private javax.swing.JFormattedTextField TF_DTIni;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void SalvarComanda() {
        ResultSet rsSalvaComanda = FMaster.con.executeSQL("select * from atncomanda where id_comanda = 0");
        try {
            rsSalvaComanda.moveToInsertRow();
            rsSalvaComanda.updateInt("id_mesa", Integer.parseInt(TFMesa.getText().isEmpty() ? "0" : TFMesa.getText()));
            rsSalvaComanda.updateInt("id_comanda", Utilitario.getSequencia("atncomanda", "id_comanda"));
            rsSalvaComanda.updateInt("situacao", 1);
            rsSalvaComanda.updateTimestamp("data", Utilitario.getDateAndTimeAtual());
            rsSalvaComanda.insertRow();
            rsSalvaComanda.close();
            PreencheHerder();
            GravaPrimeiraLinhaCliente();
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void GravaPrimeiraLinhaCliente() {
        ResultSet rsGravaPrimeiraLinhaCliente = FMaster.con.executeSQL("select * from atncomcli where id_com_clie = 0");
        try {
            rsGravaPrimeiraLinhaCliente.first();
            rsGravaPrimeiraLinhaCliente.moveToInsertRow();
            rsGravaPrimeiraLinhaCliente.updateInt("id_com_clie", Utilitario.getSequencia("atncomcli", "id_com_clie"));
            rsGravaPrimeiraLinhaCliente.updateInt("id_comanda", Integer.parseInt(TFComanda.getText().isEmpty() ? "0" : TFComanda.getText()));
            rsGravaPrimeiraLinhaCliente.updateString("nome", "Mesa " + TFMesa.getText());
            rsGravaPrimeiraLinhaCliente.updateString("cod_mesa", TFMesa.getText());
            rsGravaPrimeiraLinhaCliente.insertRow();
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public int PreencheHerder() {
        String mesa = TFMesa.getText().isEmpty() ? "0" : TFMesa.getText();
        ResultSet rsHeder = FMaster.con.executeSQL("select * from atncomanda where id_mesa = '" + mesa + "' and situacao = 1");
        try {
            rsHeder.first();
            if (rsHeder.isFirst()) {
                TFComanda.setText(rsHeder.getString("id_comanda"));
                TFMesa.setText(rsHeder.getString("id_mesa"));
                TFData.setText(Utilitario.FormatDate(rsHeder.getDate("data")));
                SetaVlrFrmTotais();
                rsHeder.close();
                DesabilitaBotoesHeder(true);
                return 1;
            } else {
                TFComanda.setText("");
                TFData.setText("");
                DesabilitaBotoesHeder(false);
                SetaVlrFrmTotais();
                return 0;
            }
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
        DesabilitaBotoesHeder(false);
        return 0;
    }

    public void LimparCamposHerder() {
        TFComanda.setText("");
        TFMesa.setText("");
        TFMesa.requestFocus();
        TFValorTotal.setText("");
        TFData.setText("");
        TFValorPago.setText("");
        TFSaldoAPagar.setText("");
        PreencheHerder();
        PreencherJtableCliente("0", "0");
    }

    private void DeletaComanda() {
        //Verifica se a comanda pode ser excluida
        if (!TFComanda.getText().isEmpty()) {
            String id_Comada = TFComanda.getText().isEmpty() ? "0" : TFComanda.getText();
            ResultSet rsComCli = FMaster.con.executeSQL("select count(*) as  cont from atncomcli where id_comanda = '" + id_Comada + "'");
            try {
                rsComCli.first();
                if (rsComCli.isFirst()) {
                    int count = rsComCli.getInt("cont");
                    if (count > 0) {
                        JOptionPane.showMessageDialog(null, "Comanda não pode ser excluido pois possui cliente vinculado!", "Alerta", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                rsComCli.close();
            } catch (SQLException ex) {
                Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //

        //
        try {
            if (!TFComanda.getText().isEmpty()) {
                String id_Comada = TFComanda.getText().isEmpty() ? "0" : TFComanda.getText();
                FMaster.con.executeUpdate("delete from atncomanda where id_comanda = '" + id_Comada + "'");
                LimparCamposHerder();
            } else {
                JOptionPane.showMessageDialog(null, "Uma comanda deve ser informada!", "Alerta", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possível excluir a comanda!", "Alerta", JOptionPane.ERROR_MESSAGE);
        }
        //
    }

    private void DesabilitaBotoesHeder(boolean status) {
        BTExcluiComada.setEnabled(status);
        BTInsereCliente.setEnabled(status);
    }

    private void DesabilitaBotoesCliente() {
        if (TBClientes.getSelectedRow() != -1) {
            BTAlteraCliente.setEnabled(true);
            BTExcluiCliente.setEnabled(true);
            BTInsereProduto.setEnabled(true);
        } else {
            BTAlteraCliente.setEnabled(false);
            BTExcluiCliente.setEnabled(false);
            BTInsereProduto.setEnabled(false);
        }

    }

    private void DesabilitaBotoesProduto() {
        if (TBProduto.getSelectedRow() != -1) {
            BTAlteraProduto.setEnabled(true);
            BTExcluiProduto.setEnabled(true);
        } else {
            BTAlteraProduto.setEnabled(false);
            BTExcluiProduto.setEnabled(false);
        }
    }
//    private void DesabilitaBotoes(int des) {
//        if (des == 1) {
//            BTExcluiComada.setEnabled(false);
//            BTInsereCliente.setEnabled(false);
//            BTAlteraCliente.setEnabled(false);
//            BTExcluiCliente.setEnabled(false);
//            BTInsereProduto.setEnabled(false);
//            BTAlteraProduto.setEnabled(false);
//            BTExcluiProduto.setEnabled(false);
//        }
//        if (des == 2) {
//            BTExcluiComada.setEnabled(true);
//            BTInsereCliente.setEnabled(true);
//            BTAlteraCliente.setEnabled(false);
//            BTExcluiCliente.setEnabled(false);
//            BTInsereProduto.setEnabled(false);
//            BTAlteraProduto.setEnabled(false);
//            BTExcluiProduto.setEnabled(false);
//        }
//        if (TBClientes.getSelectedRow() >= 1) {
//            BTExcluiComada.setEnabled(true);
//            BTInsereCliente.setEnabled(true);
//            BTAlteraCliente.setEnabled(true);
//            BTExcluiCliente.setEnabled(true);
//            BTInsereProduto.setEnabled(false);
//            BTAlteraProduto.setEnabled(false);
//            BTExcluiProduto.setEnabled(false);
//        } else {
//            BTExcluiComada.setEnabled(true);
//            BTInsereCliente.setEnabled(false);
//            BTAlteraCliente.setEnabled(false);
//            BTExcluiCliente.setEnabled(false);
//            BTInsereProduto.setEnabled(false);
//            BTAlteraProduto.setEnabled(false);
//            BTExcluiProduto.setEnabled(false);
//        }
//
//    }

    public void PreencherJtableCliente(String comanda, String mesa) {
        try {
            ResultSet rsComanda = FMaster.con.executeSQL("select * from atncomanda where id_mesa = '" + mesa + "' and id_comanda = '" + comanda + "'");
            rsComanda.first();
            DefaultTableModel modelo = (DefaultTableModel) TBClientes.getModel();
            modelo.setNumRows(0);
            if (rsComanda.isFirst()) {
                ResultSet rsPreencheJtableCliente = FMaster.con.executeSQL("select * from atncomcli where id_comanda = '" + rsComanda.getInt("id_comanda") + "' and cod_mesa = '" + rsComanda.getString("id_mesa") + "' order by nome");
                rsPreencheJtableCliente.first();
                if (rsPreencheJtableCliente.isFirst()) {
                    do {
                        modelo.addRow(new Object[]{rsPreencheJtableCliente.getString("id_com_clie"), rsPreencheJtableCliente.getString("id_comanda"), rsPreencheJtableCliente.getString("nome"), Utilitario.getFomatDecimal(rsPreencheJtableCliente.getFloat("vlr_total")), Utilitario.getFomatDecimal(rsPreencheJtableCliente.getFloat("vlr_pago")), Utilitario.getFomatDecimal(rsPreencheJtableCliente.getFloat("vlr_saldo"))});
                    } while (rsPreencheJtableCliente.next());

                } else {
                    modelo.setNumRows(0);
                }
                rsPreencheJtableCliente.close();
            } else {
                modelo.setNumRows(0);
            }
            rsComanda.close();

        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
        DesabilitaBotoesCliente();
        PreencheJtableProduto();
    }

    private void AlteraComanda() {
        String comanda = TFComanda.getText().isEmpty() ? "0" : TFComanda.getText();
        ResultSet rsAlteraComanda = FMaster.con.executeSQL("select * from atncomanda where id_comanda = '" + comanda + "'");
        try {
            rsAlteraComanda.first();
            if (rsAlteraComanda.isFirst()) {
                rsAlteraComanda.updateInt("id_mesa", Integer.parseInt(TFMesa.getText().isEmpty() ? "0" : TFMesa.getText()));
                rsAlteraComanda.updateRow();
                PreencheHerder();
                AlteraMesaJTableCliente();
            }

        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void AlteraMesaJTableCliente() {
        String comanda = TFComanda.getText().trim().isEmpty() ? "0" : TFComanda.getText().trim();
        String mesa = TFMesa.getText().trim().isEmpty() ? "0" : TFMesa.getText().trim();
        FMaster.con.executeUpdate("update  atncomcli set cod_mesa = " + mesa + " where id_comanda = '" + comanda + "'");
    }

    private void ExcluiCliente() {
        String cliente = Utilitario.getValueColumn("CodCliente", TBClientes);
        String comanda = Utilitario.getValueColumn("Comanda", TBClientes);
        ResultSet rsCompro = FMaster.con.executeSQL("select count(*) as  cont from atncompro where id_com_clie = '" + cliente + "' and id_comanda = '" + comanda + "'");
        try {
            rsCompro.first();
            if (rsCompro.isFirst()) {
                int count = rsCompro.getInt("cont");
                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "Cliente não pode ser excluido pois possui produto vinculado!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            rsCompro.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }

        String mesa = TFMesa.getText().isEmpty() ? "0" : TFMesa.getText();
        try {
            if (TBClientes.getSelectedRow() != -1) {
                String cod_cliente = Utilitario.getValueColumn("CodCliente", TBClientes);
                FMaster.con.executeUpdate("delete from atncomcli where id_com_clie = '" + cod_cliente + "'");
                PreencherJtableCliente(TFComanda.getText(), mesa);
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um cliente!", "Alerta", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possível excluir o cliente!", "Alerta", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void PreencheJtableProduto() {
        String cliente = Utilitario.getValueColumn("CodCliente", TBClientes);
        String comanda = Utilitario.getValueColumn("Comanda", TBClientes);
        try {

            DefaultTableModel modelo = (DefaultTableModel) TBProduto.getModel();
            modelo.setNumRows(0);

            ResultSet rsCompro = FMaster.con.executeSQL("select * from atncompro where id_com_clie = '" + cliente + "' and id_comanda = '" + comanda + "'");
            rsCompro.first();
            if (rsCompro.isFirst()) {
                do {
                    ResultSet rsProduto = FMaster.con.executeSQL("select * from estproduto where id_produto = '" + rsCompro.getString("id_produto") + "'");
                    rsProduto.first();
                    String descProduto = "";
                    if (rsProduto.isFirst()) {
                        descProduto = rsProduto.getString("descricao");
                    }
                    rsProduto.close();
                    modelo.addRow(new Object[]{rsCompro.getString("id_comanda"),
                                rsCompro.getString("id_com_clie"),
                                rsCompro.getString("id_com_pro"),
                                descProduto,
                                Utilitario.getFomatDecimal(rsCompro.getFloat("qtde")),
                                Utilitario.getFomatDecimal(rsCompro.getFloat("vlr_unitario")),
                                Utilitario.getFomatDecimal(rsCompro.getFloat("vlr_total")),
                                rsCompro.getString("observacao")});
                } while (rsCompro.next());

            }
            rsCompro.close();

        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
        DesabilitaBotoesProduto();
    }

    private void ExcluiProduto() {

        //caso produto pago nao deixa ser excluido
        if (TBProduto.getSelectedRow() != -1) {
            String cliente = Utilitario.getValueColumn("Cliente", TBProduto);
            String comanda = Utilitario.getValueColumn("Comanda", TBProduto);
            String id_com_pro = Utilitario.getValueColumn("Produto", TBProduto);
            ResultSet rsProCom = FMaster.con.executeSQL("select * from atncompro where id_comanda = '" + comanda + "' and id_com_clie = '" + cliente + "' and id_com_pro = '" + id_com_pro + "'");
            try {
                rsProCom.first();
                if (rsProCom.isFirst()) {
                    if ((rsProCom.getFloat("vlr_total") == rsProCom.getFloat("vlr_pago")) && (rsProCom.getFloat("vlr_total") != 0) && (rsProCom.getFloat("vlr_pago") != 0)) {
                        JOptionPane.showMessageDialog(null, "Produto pago não pode ser excluido!", "Alerta", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    rsProCom.close();
                } catch (SQLException ex) {
                    Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }


        try {
            if (TBProduto.getSelectedRow() != -1) {
                String cliente = Utilitario.getValueColumn("Cliente", TBProduto);
                String comanda = Utilitario.getValueColumn("Comanda", TBProduto);
                String id_com_pro = Utilitario.getValueColumn("Produto", TBProduto);
                FMaster.con.executeUpdate("delete from atncompro where id_com_clie = '" + cliente + "' and id_comanda = '" + comanda + "' and id_com_pro = '" + id_com_pro + "'");
                PreencheJtableProduto();
                CalculaTotaisDoCliente();
                SetValuesRowTableCliente();
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um produto!", "Alerta", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possível excluir o produto!", "Alerta", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void CalculaTotaisDoCliente() {
        String comanda = Utilitario.getValueColumn("Comanda", TBClientes);
        String cliente = Utilitario.getValueColumn("CodCliente", TBClientes);
        FMaster.con.executeUpdate("update atncomcli set vlr_total =  (select sum(vlr_total) from atncompro "
                + "where atncompro.id_com_clie =  atncomcli.id_com_clie and atncompro.id_comanda = atncomcli.id_comanda) where atncomcli.id_comanda = '" + comanda + "' and atncomcli.id_com_clie = '" + cliente + "'");

        FMaster.con.executeUpdate("update atncomcli set vlr_saldo = (vlr_total - vlr_pago) where atncomcli.id_comanda = '" + comanda + "' and atncomcli.id_com_clie = '" + cliente + "'");
        CalculaTotaisDaComanda();
    }

    public void SetValuesRowTableCliente() {
        String comanda = Utilitario.getValueColumn("Comanda", TBClientes);
        String cliente = Utilitario.getValueColumn("CodCliente", TBClientes);
        ResultSet rsCliente = FMaster.con.executeSQL("select * from atncomcli where id_comanda = '" + comanda + "' and id_com_clie = '" + cliente + "'");
        try {
            rsCliente.first();
            if (rsCliente.isFirst()) {
                String vlr_total = Utilitario.getFomatDecimal(rsCliente.getFloat("vlr_total"));
                String vlr_pago = Utilitario.getFomatDecimal(rsCliente.getFloat("vlr_pago"));
                String vlr_saldo = Utilitario.getFomatDecimal(rsCliente.getFloat("vlr_saldo"));
                TBClientes.setValueAt(String.valueOf(vlr_total).replace(".", ","), TBClientes.getSelectedRow(), Utilitario.getIndiceColumn("Valor Total", TBClientes));
                TBClientes.setValueAt(String.valueOf(vlr_pago).replace(".", ","), TBClientes.getSelectedRow(), Utilitario.getIndiceColumn("Valor Quitado", TBClientes));
                TBClientes.setValueAt(String.valueOf(vlr_saldo).replace(".", ","), TBClientes.getSelectedRow(), Utilitario.getIndiceColumn("Saldo a Pagar", TBClientes));
            }
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void CalculaTotaisDaComanda() {
        String comanda = TFComanda.getText().trim().isEmpty() ? "0" : TFComanda.getText().trim();
        FMaster.con.executeUpdate("update atncomanda set vlr_total =  (select sum(vlr_total) from atncomcli "
                + "where atncomanda.id_comanda = atncomcli.id_comanda), vlr_pago = (select sum(vlr_pago) from atncomcli "
                + "where atncomanda.id_comanda = atncomcli.id_comanda), vlr_saldo_pagar = (select sum(vlr_saldo) from atncomcli "
                + "where atncomanda.id_comanda = atncomcli.id_comanda)"
                + " where atncomanda.id_comanda = '" + comanda + "'");

        SetaVlrFrmTotais();
    }

    public void SetaVlrFrmTotais() {
        String comanda = TFComanda.getText().trim().isEmpty() ? "0" : TFComanda.getText().trim();
        ResultSet rsComanda = FMaster.con.executeSQL("select * from atncomanda where id_comanda = '" + comanda + "'");
        try {

            rsComanda.first();
            if (rsComanda.isFirst()) {
                TFValorTotal.setText(Utilitario.getFomatDecimal(rsComanda.getFloat("vlr_total")));
                TFSaldoAPagar.setText(Utilitario.getFomatDecimal(rsComanda.getFloat("vlr_saldo_pagar")));
                TFValorPago.setText(Utilitario.getFomatDecimal(rsComanda.getFloat("vlr_pago")));
                TFAcrescimo.setText(Utilitario.getFomatDecimal(rsComanda.getFloat("vlr_acrescimo")));
                TFDesconto.setText(Utilitario.getFomatDecimal(rsComanda.getFloat("vlr_desconto")));
            } else {
                TFValorTotal.setText("");
                TFSaldoAPagar.setText("");
                TFValorPago.setText("");
                TFAcrescimo.setText("");
                TFDesconto.setText("");
            }
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rsComanda.close();
            } catch (SQLException ex) {
                Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void PreencherJtableConsulta() {
        ResultSet rsComanda = FMaster.con.executeSQL("select * from atncomanda" + Filtra() + " order by id_mesa, id_comanda, data");
        try {
            DefaultTableModel modelo = (DefaultTableModel) TBConsultaComanda.getModel();
            modelo.setNumRows(0);
            while (rsComanda.next()) {
                String descSituacao = "";
                int situacao = rsComanda.getInt("situacao");
                if (situacao == 1) {
                    descSituacao = "Mesa aberta";
                } else {
                    descSituacao = "Mesa fechada";
                }
                modelo.addRow(new Object[]{rsComanda.getString("id_mesa"),
                            rsComanda.getString("id_comanda"),
                            Utilitario.FormatDate(rsComanda.getDate("data")),
                            descSituacao,
                            Utilitario.getFomatDecimal(rsComanda.getFloat("vlr_total")),
                            Utilitario.getFomatDecimal(rsComanda.getFloat("vlr_pago")),
                            Utilitario.getFomatDecimal(rsComanda.getFloat("vlr_saldo_pagar"))});
            }
            rsComanda.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String Filtra() {
        String mesaIni;
        String mesaFin;
        String comandaIni;
        String comandaFim;
        String situacao;
        Date dDtIni;
        Date dDtFin;
        String filtro = "";

        mesaIni = TFMesaIni.getText().isEmpty() ? "0" : TFMesaIni.getText();
        mesaFin = TFMesaFin.getText().isEmpty() ? "0" : TFMesaFin.getText();
        comandaIni = TFComandaIni.getText().isEmpty() ? "0" : TFComandaIni.getText();
        comandaFim = TFComandaFin.getText().isEmpty() ? "0" : TFComandaFin.getText();
        dDtIni = (java.sql.Date) Utilitario.getPegaDataSql(TF_DTIni.getText().equals("00/00/0000") ? "" : (TF_DTIni.getText()));
        dDtFin = (java.sql.Date) Utilitario.getPegaDataSql(TF_DTFin.getText().equals("00/00/0000") ? "" : (TF_DTFin.getText()));
        situacao = String.valueOf(CBSituacao.getSelectedIndex());

        if (!mesaIni.equals("0")) {
            if (filtro.equals("")) {
                filtro = " where id_mesa >= '" + mesaIni + "'";
            }
        }
        if (!mesaFin.equals("0")) {
            if (filtro.equals("")) {
                filtro = " where id_mesa <= '" + mesaFin + "'";
            } else {
                filtro = filtro + " and id_mesa <= '" + mesaFin + "'";
            }
        }
        if (!comandaIni.equals("0")) {
            if (filtro.equals("")) {
                filtro = " where id_comanda >= '" + comandaIni + "'";
            } else {
                filtro = filtro + " and id_comanda >= '" + comandaIni + "'";
            }
        }
        if (!comandaFim.equals("0")) {
            if (filtro.equals("")) {
                filtro = " where id_comanda <= '" + comandaFim + "'";
            } else {
                filtro = filtro + " and id_comanda <= '" + comandaFim + "'";
            }
        }
        if (dDtIni != null) {
            if (filtro.equals("")) {
                filtro = " where cast(data as date) >= '" + dDtIni + "'";
            } else {
                filtro = filtro + " and cast(data as date) >= '" + dDtIni + "'";
            }
        }
        if (dDtFin != null) {
            if (filtro.equals("")) {
                filtro = " where cast(data as date) <= '" + dDtFin + "'";
            } else {
                filtro = filtro + " and cast(data as date) <= '" + dDtFin + "'";
            }
        }
        if (!situacao.equals("0")) {
            if (filtro.equals("")) {
                filtro = " where situacao = '" + situacao + "'";
            } else {
                filtro = filtro + " and situacao = '" + situacao + "'";
            }
        }
        return filtro;
    }

    private void posicionaMesa() {
        String id_mesa = Utilitario.getValueColumn("Mesa", TBConsultaComanda);
        String id_comanda = Utilitario.getValueColumn("Comanda", TBConsultaComanda);
        ResultSet rsComanda = FMaster.con.executeSQL("select situacao from atncomanda where id_comanda = '" + id_comanda + "'");
        try {
            rsComanda.first();
            if (rsComanda.isFirst()) {
                if (rsComanda.getInt("situacao") == 1) {
                    TFMesa.setText(id_mesa);
                    PreencheHerder();
                    PreencherJtableCliente(id_comanda, id_mesa);
                    jTabbedPane1.setSelectedIndex(0);
                } else {
                    JOptionPane.showMessageDialog(null, "Mesa fechada não pode ser posicionada na aba de cadastro", "Alerta", JOptionPane.ERROR_MESSAGE);
                }
            }
            rsComanda.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void JuntarMesa() {
        String NumeroMesaDestino = JOptionPane.showInputDialog("Informe a mesa de destino: ");
        String id_comanda = TFComanda.getText();
        String id_mesa = TFMesa.getText();
        if (!NumeroMesaDestino.isEmpty()) {
            ResultSet rsComandaDestino = FMaster.con.executeSQL("select * from atncomanda where id_mesa = '" + NumeroMesaDestino + "' and situacao = 1");
            try {
                rsComandaDestino.first();
                if (rsComandaDestino.isFirst()) {
                    ResultSet rsComandaOrigem = FMaster.con.executeSQL("select * from atncomanda where id_comanda = '" + id_comanda + "' and id_mesa = '" + id_mesa + "'");
                    rsComandaOrigem.first();
                    if (rsComandaOrigem.isFirst()) {
                        ResultSet rsCliComOrigem = FMaster.con.executeSQL("select * from atncomcli where id_comanda = '" + id_comanda + "'");
                        rsCliComOrigem.first();
                        if (rsCliComOrigem.isFirst()) {
                            ResultSet rsCliComDestino = FMaster.con.executeSQL("select * from atncomcli where id_com_clie = 0");
                            rsCliComDestino.first();
                            do {
                                rsCliComDestino.moveToInsertRow();
                                rsCliComDestino.updateInt("id_com_clie", rsCliComOrigem.getInt("id_com_clie"));
                                rsCliComDestino.updateInt("id_comanda", rsComandaDestino.getInt("id_comanda"));
                                rsCliComDestino.updateString("nome", rsCliComOrigem.getString("nome"));
                                rsCliComDestino.updateFloat("vlr_total", rsCliComOrigem.getFloat("vlr_total"));
                                rsCliComDestino.updateFloat("vlr_pago", rsCliComOrigem.getFloat("vlr_pago"));
                                rsCliComDestino.updateFloat("vlr_saldo", rsCliComOrigem.getFloat("vlr_saldo"));
                                rsCliComDestino.updateInt("status", 0);
                                rsCliComDestino.updateInt("cod_mesa", rsComandaDestino.getInt("id_mesa"));
                                rsCliComDestino.insertRow();

                                ResultSet rsProdutoComOrigem = FMaster.con.executeSQL("select * from atncompro where id_comanda = '" + rsCliComOrigem.getString("id_comanda") + "' and id_com_clie = '" + rsCliComOrigem.getString("id_com_clie") + "'");
                                rsProdutoComOrigem.first();
                                if (rsProdutoComOrigem.isFirst()) {
                                    ResultSet rsProdComDestino = FMaster.con.executeSQL("select * from atncompro where id_com_clie = 0");
                                    rsProdComDestino.first();
                                    do {
                                        rsProdComDestino.moveToInsertRow();
                                        rsProdComDestino.updateInt("id_com_clie", rsProdutoComOrigem.getInt("id_com_clie"));
                                        rsProdComDestino.updateInt("id_comanda", rsComandaDestino.getInt("id_comanda"));
                                        rsProdComDestino.updateInt("id_produto", rsProdutoComOrigem.getInt("id_produto"));
                                        rsProdComDestino.updateInt("id_com_pro", Utilitario.getSequencia("atncompro", "id_com_pro"));
                                        rsProdComDestino.updateInt("qtde", rsProdutoComOrigem.getInt("qtde"));
                                        rsProdComDestino.updateFloat("vlr_unitario", rsProdutoComOrigem.getFloat("vlr_unitario"));
                                        rsProdComDestino.updateFloat("vlr_total", rsProdutoComOrigem.getFloat("vlr_total"));
                                        rsProdComDestino.updateInt("qtde_pago", rsProdutoComOrigem.getInt("qtde_pago"));
                                        rsProdComDestino.updateFloat("vlr_pago", rsProdutoComOrigem.getFloat("vlr_pago"));
                                        rsProdComDestino.updateInt("qtde_a_pagar", rsProdutoComOrigem.getInt("qtde_a_pagar"));
                                        rsProdComDestino.updateFloat("vlr_a_pagar", rsProdutoComOrigem.getFloat("vlr_a_pagar"));
                                        rsProdComDestino.updateString("observacao", rsProdutoComOrigem.getString("observacao"));
                                        rsProdComDestino.updateInt("selecao", rsProdutoComOrigem.getInt("selecao"));
                                        rsProdComDestino.insertRow();
                                        rsProdutoComOrigem.deleteRow();
                                    } while (rsProdutoComOrigem.next());

                                    rsProdComDestino.close();
                                    rsProdutoComOrigem.close();
                                }
                                rsCliComOrigem.deleteRow();
                            } while (rsCliComOrigem.next());
                            rsCliComDestino.close();
                            rsCliComOrigem.close();
                        }
                        FMaster.con.executeUpdate("update cxaitemcaixa set id_comanda = '"+rsComandaDestino.getString("id_comanda")+"' where id_comanda = '"+rsComandaOrigem.getString("id_comanda")+"'");
                        rsComandaOrigem.deleteRow();
                        LimparCamposHerder();
                        TFMesa.setText(NumeroMesaDestino);
                        PreencheHerder();
                        PreencherJtableCliente(rsComandaDestino.getString("id_comanda"), NumeroMesaDestino);
                        CalculaTotaisDaComanda();
                    }
                    rsComandaOrigem.close();
                }
                rsComandaDestino.close();



            } catch (SQLException ex) {
                Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void AtualizaQtdeAPagar() {
        String id_comanda = TFComanda.getText().isEmpty()?"":TFComanda.getText().trim();
        FMaster.con.executeUpdate("update atncompro set qtde_a_pagar =   (qtde - qtde_pago) where id_comanda = '" + id_comanda + "'");

        /*atualiza valor e quantidade restante a pagar tabela atncompro */
        FMaster.con.executeUpdate("update atncompro set vlr_a_pagar = (vlr_total - vlr_pago), qtde_a_pagar = (qtde - qtde_pago) where atncompro.selecao = 1 and atncompro.id_comanda = '" + id_comanda + "'");
    }
}
