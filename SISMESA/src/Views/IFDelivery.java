/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IFDelivery.java
 *
 * Created on 20/10/2010, 16:00:45
 */
package Views;

import classess.GetsSets;
import classess.MovimentoCaixa;
import classess.MovimentoEstoque;
import classess.PrintRel;
import classess.Utilitario;
import Classes.bematech.BemaECF;
import View_consulta.DLProdutos;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Maicol
 */
public class IFDelivery extends javax.swing.JInternalFrame {

    /**
     * @author Maicol
     * Declaração de atributos
     */
    Object[] options = {"Sim", "Não"};

    /** Creates new form IFDelivery */
    public IFDelivery() {
        initComponents();
        //redimenciona o lookandFeeld de acordo com o selecionado
        SwingUtilities.updateComponentTreeUI(this);
        this.pack();

        PreencherJtableDeliveryAguardando();
        PreencherJtableDeliveryEmTransporte();
        HabilitaCamposRecebimento();
        HabilitaBtnEntregar();

        TFCodProduto.setInputVerifier(new InputVerifier() {

            @Override
            public boolean verify(JComponent input) {
                JTextField texto = (JTextField) input;
                boolean valida = false;
                if (!texto.getText().isEmpty()) {
                    try {
                        ResultSet rsproduto = FMaster.con.executeSQL("select * from estproduto where id_produto = '" + texto.getText() + "' and tipo_produto = 1");
                        rsproduto.first();
                        if (rsproduto.isFirst()) {
                            valida = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Produto não cadastrado!", "Alerta", JOptionPane.ERROR_MESSAGE);
                            valida = false;
                        }
                        rsproduto.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(DLCadProdComanda.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    valida = true;
                }
                return valida;
            }
        });
        
        TFVlrTaxaEntrega.setInputVerifier(new InputVerifier() {

            @Override
            public boolean verify(JComponent input) {
                JTextField texto = (JTextField) input;
                float vlrsubTotal = Float.parseFloat(TFVlrTotalBruto.getText().isEmpty() ? "0" : TFVlrTotalBruto.getText().replace(",", "."));
                float vlrAcrescimo = Float.parseFloat(texto.getText().isEmpty() ? "0" : texto.getText().replace(",", "."));

                if (vlrAcrescimo >= vlrsubTotal) {
                    JOptionPane.showMessageDialog(null, "Valor de taxa de entrega não pode ser maior ou igual ao valor Total da Compra!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return false;
                } else {
                    return true;
                }

            }
        });

        TFVlrDesconto.setInputVerifier(new InputVerifier() {

            @Override
            public boolean verify(JComponent input) {
                JTextField texto = (JTextField) input;
                float vlrsubTotal = Float.parseFloat(TFVlrTotalBruto.getText().isEmpty() ? "0" : TFVlrTotalBruto.getText().replace(",", "."));
                float vlrDesconto = Float.parseFloat(texto.getText().isEmpty() ? "0" : texto.getText().replace(",", "."));

                if (vlrDesconto >= vlrsubTotal) {
                    JOptionPane.showMessageDialog(null, "Valor de desconto não pode ser maior ou igual ao valor Total da Compra!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return false;
                } else {
                    return true;
                }

            }
        });
        TF_DTIni.setText(Utilitario.getDataAtual());
        TF_DTFin.setText(Utilitario.getDataAtual());
        PreencherJtableConsulta();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        JPCadastro = new javax.swing.JPanel();
        LBTelefone = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanelInsereProduto = new javax.swing.JPanel();
        TFCodProduto = new Componentes.DKJTFInteger();
        LBCodProduto = new javax.swing.JLabel();
        LBDescricaoProduto = new javax.swing.JLabel();
        TFDescricaoProduto = new javax.swing.JTextField();
        LBValor = new javax.swing.JLabel();
        TFValorUnit = new Componentes.DKJTFFloat();
        LBQtde = new javax.swing.JLabel();
        TFQtde = new Componentes.DKJTFInteger();
        jButton1 = new javax.swing.JButton();
        jPanelEndereco = new javax.swing.JPanel();
        LBNome = new javax.swing.JLabel();
        LBCidade = new javax.swing.JLabel();
        LBUF = new javax.swing.JLabel();
        LBBairro = new javax.swing.JLabel();
        LBRua = new javax.swing.JLabel();
        LBNumero = new javax.swing.JLabel();
        TFNome = new javax.swing.JTextField();
        TFCidade = new javax.swing.JTextField();
        TFUF = new javax.swing.JTextField();
        TFNumero = new javax.swing.JTextField();
        TFRua = new javax.swing.JTextField();
        TFBairro = new javax.swing.JTextField();
        BTPequisaCliente = new javax.swing.JButton();
        jScrollPanelJTableProdutos = new javax.swing.JScrollPane();
        TBProdutosDelivery = new javax.swing.JTable();
        jPanelLadoEsquerdo = new javax.swing.JPanel();
        jScrollPanelJtableEmAguardo = new javax.swing.JScrollPane();
        TBDeliveryAguardando = new javax.swing.JTable();
        LBEmTransporte = new javax.swing.JLabel();
        JLFinalizandoVenda = new javax.swing.JLabel();
        LBTotalCompra = new javax.swing.JLabel();
        LBTaxaEntrega = new javax.swing.JLabel();
        TFVlrTotalBruto = new Componentes.DKJTFFloat();
        TFVlrTaxaEntrega = new Componentes.DKJTFFloat();
        LBValorPagar = new javax.swing.JLabel();
        LBTotalPago = new javax.swing.JLabel();
        CBFormaPgto = new javax.swing.JComboBox();
        TFVlrRecebido = new Componentes.DKJTFFloat();
        BTEntregar = new javax.swing.JButton();
        TFVlrDesconto = new Componentes.DKJTFFloat();
        jScrollPanelJtableEmTransporte = new javax.swing.JScrollPane();
        TBDeliveryEmTransporte = new javax.swing.JTable();
        BTFinalizar = new javax.swing.JButton();
        JLEmAguardo = new javax.swing.JLabel();
        LBDesconto = new javax.swing.JLabel();
        LBFormaPgto = new javax.swing.JLabel();
        LBTroco = new javax.swing.JLabel();
        TFVlrTotalLiquido = new javax.swing.JTextField();
        TFVlrTroco = new javax.swing.JTextField();
        TFTelefone = new Componentes.DKJTFFone();
        TFCodDelivery = new javax.swing.JTextField();
        LBCodDeliverry = new javax.swing.JLabel();
        LBDescSituacao = new javax.swing.JLabel();
        JPanelBtnLadoDireitoBaixo = new javax.swing.JPanel();
        BTLimpar = new javax.swing.JButton();
        BTCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        TFData = new javax.swing.JTextField();
        LBData = new javax.swing.JLabel();
        JPPesquisa = new javax.swing.JPanel();
        FTFfiltro = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        TFDESCGERAL = new javax.swing.JTextField();
        BT_FILTER = new javax.swing.JButton();
        TFCodDeliveryIni = new Componentes.DKJTFInteger();
        TFCodDeliveryFin = new Componentes.DKJTFInteger();
        CBSituacao = new javax.swing.JComboBox();
        TF_DTIni = new javax.swing.JFormattedTextField();
        TF_DTFin = new javax.swing.JFormattedTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        TbPadrao = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Atendimento Delivery");
        setMinimumSize(new java.awt.Dimension(800, 463));

        jTabbedPane1.setBackground(new java.awt.Color(153, 153, 153));
        jTabbedPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane1FocusGained(evt);
            }
        });

        JPCadastro.setLayout(new java.awt.GridBagLayout());

        LBTelefone.setText("Telefone");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 65;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        JPCadastro.add(LBTelefone, gridBagConstraints);

        jSeparator1.setForeground(new java.awt.Color(255, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        JPCadastro.add(jSeparator1, gridBagConstraints);

        jPanelInsereProduto.setLayout(new java.awt.GridBagLayout());

        TFCodProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFCodProdutoFocusLost(evt);
            }
        });
        TFCodProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TFCodProdutoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 2, 0);
        jPanelInsereProduto.add(TFCodProduto, gridBagConstraints);

        LBCodProduto.setText("Cód. Produto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanelInsereProduto.add(LBCodProduto, gridBagConstraints);

        LBDescricaoProduto.setText("Descrição do Produto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        jPanelInsereProduto.add(LBDescricaoProduto, gridBagConstraints);

        TFDescricaoProduto.setEditable(false);
        TFDescricaoProduto.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 114;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 2, 0);
        jPanelInsereProduto.add(TFDescricaoProduto, gridBagConstraints);

        LBValor.setText("Valor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        jPanelInsereProduto.add(LBValor, gridBagConstraints);

        TFValorUnit.setEditable(false);
        TFValorUnit.setText("");
        TFValorUnit.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        jPanelInsereProduto.add(TFValorUnit, gridBagConstraints);

        LBQtde.setText("Qtde");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        jPanelInsereProduto.add(LBQtde, gridBagConstraints);

        TFQtde.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TFQtdeKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        jPanelInsereProduto.add(TFQtde, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_16.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 2, 0);
        jPanelInsereProduto.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 4, 0, 0);
        JPCadastro.add(jPanelInsereProduto, gridBagConstraints);

        jPanelEndereco.setLayout(new java.awt.GridBagLayout());

        LBNome.setText("Nome:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanelEndereco.add(LBNome, gridBagConstraints);

        LBCidade.setText("Cidade:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanelEndereco.add(LBCidade, gridBagConstraints);

        LBUF.setText("UF:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        jPanelEndereco.add(LBUF, gridBagConstraints);

        LBBairro.setText("Bairro:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanelEndereco.add(LBBairro, gridBagConstraints);

        LBRua.setText("Rua:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanelEndereco.add(LBRua, gridBagConstraints);

        LBNumero.setText("Numero:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        jPanelEndereco.add(LBNumero, gridBagConstraints);

        TFNome.setEditable(false);
        TFNome.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 321;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        jPanelEndereco.add(TFNome, gridBagConstraints);

        TFCidade.setEditable(false);
        TFCidade.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 219;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        jPanelEndereco.add(TFCidade, gridBagConstraints);

        TFUF.setEditable(false);
        TFUF.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        jPanelEndereco.add(TFUF, gridBagConstraints);

        TFNumero.setEditable(false);
        TFNumero.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        jPanelEndereco.add(TFNumero, gridBagConstraints);

        TFRua.setEditable(false);
        TFRua.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 219;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        jPanelEndereco.add(TFRua, gridBagConstraints);

        TFBairro.setEditable(false);
        TFBairro.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 219;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        jPanelEndereco.add(TFBairro, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 4, 0, 0);
        JPCadastro.add(jPanelEndereco, gridBagConstraints);

        BTPequisaCliente.setText("Pesquisar cliente");
        BTPequisaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTPequisaClienteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        JPCadastro.add(BTPequisaCliente, gridBagConstraints);

        TBProdutosDelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id_delivery", "id_deliveryitem", "Descrição do Produto", "Qtde", "Vlr. Unit.", "Vlr. Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBProdutosDelivery.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TBProdutosDeliveryKeyPressed(evt);
            }
        });
        jScrollPanelJTableProdutos.setViewportView(TBProdutosDelivery);
        TBProdutosDelivery.getColumnModel().getColumn(0).setMinWidth(0);
        TBProdutosDelivery.getColumnModel().getColumn(0).setPreferredWidth(0);
        TBProdutosDelivery.getColumnModel().getColumn(0).setMaxWidth(0);
        TBProdutosDelivery.getColumnModel().getColumn(1).setMinWidth(0);
        TBProdutosDelivery.getColumnModel().getColumn(1).setPreferredWidth(0);
        TBProdutosDelivery.getColumnModel().getColumn(1).setMaxWidth(0);
        TBProdutosDelivery.getColumnModel().getColumn(2).setMinWidth(150);
        TBProdutosDelivery.getColumnModel().getColumn(2).setPreferredWidth(150);
        TBProdutosDelivery.getColumnModel().getColumn(2).setMaxWidth(150);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        JPCadastro.add(jScrollPanelJTableProdutos, gridBagConstraints);

        jPanelLadoEsquerdo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelLadoEsquerdo.setLayout(new java.awt.GridBagLayout());

        TBDeliveryAguardando.setAutoCreateRowSorter(true);
        TBDeliveryAguardando.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Delivery", "Cliente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBDeliveryAguardando.setSelectionBackground(new java.awt.Color(204, 255, 255));
        TBDeliveryAguardando.setSelectionForeground(new java.awt.Color(0, 0, 0));
        TBDeliveryAguardando.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBDeliveryAguardandoMouseClicked(evt);
            }
        });
        TBDeliveryAguardando.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TBDeliveryAguardandoKeyReleased(evt);
            }
        });
        jScrollPanelJtableEmAguardo.setViewportView(TBDeliveryAguardando);
        TBDeliveryAguardando.getColumnModel().getColumn(0).setMinWidth(100);
        TBDeliveryAguardando.getColumnModel().getColumn(0).setPreferredWidth(100);
        TBDeliveryAguardando.getColumnModel().getColumn(0).setMaxWidth(100);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanelLadoEsquerdo.add(jScrollPanelJtableEmAguardo, gridBagConstraints);

        LBEmTransporte.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LBEmTransporte.setForeground(new java.awt.Color(255, 0, 51));
        LBEmTransporte.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LBEmTransporte.setText("Em Transporte");
        LBEmTransporte.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 153)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanelLadoEsquerdo.add(LBEmTransporte, gridBagConstraints);

        JLFinalizandoVenda.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        JLFinalizandoVenda.setForeground(new java.awt.Color(0, 51, 255));
        JLFinalizandoVenda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLFinalizandoVenda.setText("Finalizando Venda");
        JLFinalizandoVenda.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 153)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanelLadoEsquerdo.add(JLFinalizandoVenda, gridBagConstraints);

        LBTotalCompra.setText("Total da Compra(R$)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelLadoEsquerdo.add(LBTotalCompra, gridBagConstraints);

        LBTaxaEntrega.setText("Taxa de Entrega/Serviço(R$)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanelLadoEsquerdo.add(LBTaxaEntrega, gridBagConstraints);

        TFVlrTotalBruto.setEditable(false);
        TFVlrTotalBruto.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 94;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelLadoEsquerdo.add(TFVlrTotalBruto, gridBagConstraints);

        TFVlrTaxaEntrega.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFVlrTaxaEntregaFocusLost(evt);
            }
        });
        TFVlrTaxaEntrega.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TFVlrTaxaEntregaKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 134;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanelLadoEsquerdo.add(TFVlrTaxaEntrega, gridBagConstraints);

        LBValorPagar.setText("Vlr. Pagar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanelLadoEsquerdo.add(LBValorPagar, gridBagConstraints);

        LBTotalPago.setText("Total Recebido(R$)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanelLadoEsquerdo.add(LBTotalPago, gridBagConstraints);

        CBFormaPgto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dinheiro", "Cartão de Débito", "Cartão de Crédito", "Cheque" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelLadoEsquerdo.add(CBFormaPgto, gridBagConstraints);

        TFVlrRecebido.setForeground(new java.awt.Color(0, 0, 204));
        TFVlrRecebido.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFVlrRecebido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFVlrRecebidoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanelLadoEsquerdo.add(TFVlrRecebido, gridBagConstraints);

        BTEntregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/fac_delivery.gif"))); // NOI18N
        BTEntregar.setText("Entregar");
        BTEntregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEntregarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanelLadoEsquerdo.add(BTEntregar, gridBagConstraints);

        TFVlrDesconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFVlrDescontoFocusLost(evt);
            }
        });
        TFVlrDesconto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TFVlrDescontoKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 22;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 3);
        jPanelLadoEsquerdo.add(TFVlrDesconto, gridBagConstraints);

        TBDeliveryEmTransporte.setAutoCreateRowSorter(true);
        TBDeliveryEmTransporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Delivery", "Cliente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBDeliveryEmTransporte.getTableHeader().setReorderingAllowed(false);
        TBDeliveryEmTransporte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBDeliveryEmTransporteMouseClicked(evt);
            }
        });
        TBDeliveryEmTransporte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TBDeliveryEmTransporteKeyReleased(evt);
            }
        });
        jScrollPanelJtableEmTransporte.setViewportView(TBDeliveryEmTransporte);
        TBDeliveryEmTransporte.getColumnModel().getColumn(0).setMinWidth(100);
        TBDeliveryEmTransporte.getColumnModel().getColumn(0).setPreferredWidth(100);
        TBDeliveryEmTransporte.getColumnModel().getColumn(0).setMaxWidth(100);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanelLadoEsquerdo.add(jScrollPanelJtableEmTransporte, gridBagConstraints);

        BTFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1287691470_thumb-up.png"))); // NOI18N
        BTFinalizar.setText("Finalizar");
        BTFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTFinalizarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 2, 3);
        jPanelLadoEsquerdo.add(BTFinalizar, gridBagConstraints);

        JLEmAguardo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        JLEmAguardo.setForeground(new java.awt.Color(0, 204, 51));
        JLEmAguardo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLEmAguardo.setText("Em Aguardo");
        JLEmAguardo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 153)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanelLadoEsquerdo.add(JLEmAguardo, gridBagConstraints);

        LBDesconto.setText("Desconto(R$)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanelLadoEsquerdo.add(LBDesconto, gridBagConstraints);

        LBFormaPgto.setText("Forma Pgto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanelLadoEsquerdo.add(LBFormaPgto, gridBagConstraints);

        LBTroco.setText("Troco(R$)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanelLadoEsquerdo.add(LBTroco, gridBagConstraints);

        TFVlrTotalLiquido.setEditable(false);
        TFVlrTotalLiquido.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        TFVlrTotalLiquido.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 94;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 2, 0);
        jPanelLadoEsquerdo.add(TFVlrTotalLiquido, gridBagConstraints);

        TFVlrTroco.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFVlrTroco.setForeground(new java.awt.Color(255, 0, 0));
        TFVlrTroco.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 3);
        jPanelLadoEsquerdo.add(TFVlrTroco, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        JPCadastro.add(jPanelLadoEsquerdo, gridBagConstraints);

        TFTelefone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TFTelefone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFTelefoneFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        JPCadastro.add(TFTelefone, gridBagConstraints);

        TFCodDelivery.setEditable(false);
        TFCodDelivery.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TFCodDelivery.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        JPCadastro.add(TFCodDelivery, gridBagConstraints);

        LBCodDeliverry.setText("Cód. Delivery");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        JPCadastro.add(LBCodDeliverry, gridBagConstraints);

        LBDescSituacao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        LBDescSituacao.setForeground(new java.awt.Color(0, 0, 204));
        LBDescSituacao.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        JPCadastro.add(LBDescSituacao, gridBagConstraints);

        JPanelBtnLadoDireitoBaixo.setLayout(new java.awt.GridBagLayout());

        BTLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Clear-32.png"))); // NOI18N
        BTLimpar.setText("Limpar");
        BTLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTLimparActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        JPanelBtnLadoDireitoBaixo.add(BTLimpar, gridBagConstraints);

        BTCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/delete_16.png"))); // NOI18N
        BTCancelar.setText("Cancelar");
        BTCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        JPanelBtnLadoDireitoBaixo.add(BTCancelar, gridBagConstraints);

        jLabel1.setText("F2 - (Observação)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        JPanelBtnLadoDireitoBaixo.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 0);
        JPCadastro.add(JPanelBtnLadoDireitoBaixo, gridBagConstraints);

        TFData.setEditable(false);
        TFData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TFData.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 3);
        JPCadastro.add(TFData, gridBagConstraints);

        LBData.setText("Data");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 0);
        JPCadastro.add(LBData, gridBagConstraints);

        jTabbedPane1.addTab("Cadastro", JPCadastro);

        FTFfiltro.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setText("Delivery Inicial:"); // NOI18N

        jLabel14.setText("Delivery Final:"); // NOI18N

        jLabel15.setText("Descrição/Geral:"); // NOI18N

        jLabel16.setText("Data Inicial:"); // NOI18N

        jLabel17.setText("Data Final:"); // NOI18N

        TFDESCGERAL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TFDESCGERALKeyReleased(evt);
            }
        });

        BT_FILTER.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Clear-32.png"))); // NOI18N
        BT_FILTER.setText("Limpar"); // NOI18N
        BT_FILTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_FILTERActionPerformed(evt);
            }
        });
        BT_FILTER.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BT_FILTERKeyPressed(evt);
            }
        });

        TFCodDeliveryIni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFCodDeliveryIniFocusLost(evt);
            }
        });

        TFCodDeliveryFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFCodDeliveryFinActionPerformed(evt);
            }
        });
        TFCodDeliveryFin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFCodDeliveryFinFocusLost(evt);
            }
        });

        CBSituacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Aguardando", "Em transporte", "Finalizado a venda", "Cancelado" }));
        CBSituacao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBSituacaoItemStateChanged(evt);
            }
        });

        try {
            TF_DTIni.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TF_DTIni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TF_DTIniFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TF_DTIniFocusLost(evt);
            }
        });

        try {
            TF_DTFin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TF_DTFin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TF_DTFinFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TF_DTFinFocusLost(evt);
            }
        });

        javax.swing.GroupLayout FTFfiltroLayout = new javax.swing.GroupLayout(FTFfiltro);
        FTFfiltro.setLayout(FTFfiltroLayout);
        FTFfiltroLayout.setHorizontalGroup(
            FTFfiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FTFfiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FTFfiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FTFfiltroLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TFDESCGERAL, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BT_FILTER, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FTFfiltroLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TFCodDeliveryIni, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TFCodDeliveryFin, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TF_DTIni, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TF_DTFin, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(CBSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        FTFfiltroLayout.setVerticalGroup(
            FTFfiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FTFfiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FTFfiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(TFCodDeliveryIni, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TFCodDeliveryFin, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(CBSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF_DTIni, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF_DTFin, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(FTFfiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(TFDESCGERAL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BT_FILTER))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TbPadrao.setAutoCreateRowSorter(true);
        TbPadrao.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TbPadrao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Delivery", "Cliente", "Telefone", "Situação", "Data", "Valor Bruto", "Acrescimo", "Desconto", "Valor Liquido"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TbPadrao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TbPadraoMouseClicked1(evt);
            }
        });
        TbPadrao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TbPadraoKeyPressed1(evt);
            }
        });
        jScrollPane3.setViewportView(TbPadrao);
        TbPadrao.getColumnModel().getColumn(0).setMinWidth(60);
        TbPadrao.getColumnModel().getColumn(0).setPreferredWidth(60);
        TbPadrao.getColumnModel().getColumn(1).setMinWidth(130);
        TbPadrao.getColumnModel().getColumn(1).setPreferredWidth(130);
        TbPadrao.getColumnModel().getColumn(2).setMinWidth(90);
        TbPadrao.getColumnModel().getColumn(2).setPreferredWidth(90);
        TbPadrao.getColumnModel().getColumn(3).setMinWidth(100);
        TbPadrao.getColumnModel().getColumn(3).setPreferredWidth(100);
        TbPadrao.getColumnModel().getColumn(4).setMinWidth(80);
        TbPadrao.getColumnModel().getColumn(4).setPreferredWidth(80);

        javax.swing.GroupLayout JPPesquisaLayout = new javax.swing.GroupLayout(JPPesquisa);
        JPPesquisa.setLayout(JPPesquisaLayout);
        JPPesquisaLayout.setHorizontalGroup(
            JPPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FTFfiltro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
        );
        JPPesquisaLayout.setVerticalGroup(
            JPPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPPesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FTFfiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Pesquisa", JPPesquisa);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setBounds(100, 50, 811, 463);
    }// </editor-fold>//GEN-END:initComponents

    private void TFDESCGERALKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFDESCGERALKeyReleased
        PreencherJtableConsulta();
}//GEN-LAST:event_TFDESCGERALKeyReleased

    private void BT_FILTERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_FILTERActionPerformed

        TFCodDeliveryIni.setText("");
        TFCodDeliveryFin.setText("");
        TF_DTIni.setText("00/00/0000");
        TF_DTFin.setText("00/00/0000");
        CBSituacao.setSelectedIndex(1);
        TFDESCGERAL.setText("");
        PreencherJtableConsulta();
}//GEN-LAST:event_BT_FILTERActionPerformed

    private void BT_FILTERKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BT_FILTERKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            //  LimpaCamposSelecao();
            //  FiltraGeral();
        }
}//GEN-LAST:event_BT_FILTERKeyPressed

    private void TFCodDeliveryIniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFCodDeliveryIniFocusLost
        PreencherJtableConsulta();
}//GEN-LAST:event_TFCodDeliveryIniFocusLost

    private void TFCodDeliveryFinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFCodDeliveryFinFocusLost
        PreencherJtableConsulta();
}//GEN-LAST:event_TFCodDeliveryFinFocusLost

    private void TbPadraoMouseClicked1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TbPadraoMouseClicked1
        if (evt.getClickCount() > 1) {
            posicionaDelivery();
        }
}//GEN-LAST:event_TbPadraoMouseClicked1

    private void TbPadraoKeyPressed1(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TbPadraoKeyPressed1
        if (evt.getKeyCode() == evt.VK_ENTER) {
            posicionaDelivery();
        }
}//GEN-LAST:event_TbPadraoKeyPressed1

    private void jTabbedPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1FocusGained

    private void TFTelefoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFTelefoneFocusLost
        SalvaDelivery();
    }//GEN-LAST:event_TFTelefoneFocusLost

    private void BTLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTLimparActionPerformed
        LimpaHeder();
        PreencherJtableProdutosDelivery();
    }//GEN-LAST:event_BTLimparActionPerformed

    private void BTPequisaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTPequisaClienteActionPerformed
        IFCliente JIFCliente = null;
        if (JIFCliente == null || JIFCliente.isVisible() == false) {
            JIFCliente = new IFCliente();
            GetsSets.getJdesktopPanelViews().add(JIFCliente);
            JIFCliente.setVisible(true);

            String id_delivery = TFCodDelivery.getText().isEmpty() ? "0" : TFCodDelivery.getText();

            ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where id_delivery = '" + id_delivery.trim() + "'");
            try {
                rsDelivery.first();
                if (rsDelivery.isFirst()) {
                    JIFCliente.prencherHeder(rsDelivery.getInt("id_cliente"));
                }
                rsDelivery.close();
            } catch (SQLException ex) {
                Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_BTPequisaClienteActionPerformed

    private void TBDeliveryAguardandoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBDeliveryAguardandoMouseClicked
        PreencherHeder(Integer.parseInt(Utilitario.getValueColumn("Código Delivery", TBDeliveryAguardando)));
        HabilitaBtnEntregar();
    }//GEN-LAST:event_TBDeliveryAguardandoMouseClicked

    private void TBDeliveryAguardandoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TBDeliveryAguardandoKeyReleased
        PreencherHeder(Integer.parseInt(Utilitario.getValueColumn("Código Delivery", TBDeliveryAguardando)));
    }//GEN-LAST:event_TBDeliveryAguardandoKeyReleased

    private void TBDeliveryEmTransporteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBDeliveryEmTransporteMouseClicked
        PreencherHeder(Integer.parseInt(Utilitario.getValueColumn("Código Delivery", TBDeliveryEmTransporte)));
        HabilitaCamposRecebimento();

    }//GEN-LAST:event_TBDeliveryEmTransporteMouseClicked

    private void TBDeliveryEmTransporteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TBDeliveryEmTransporteKeyReleased
        PreencherHeder(Integer.parseInt(Utilitario.getValueColumn("Código Delivery", TBDeliveryEmTransporte)));
        HabilitaCamposRecebimento();
    }//GEN-LAST:event_TBDeliveryEmTransporteKeyReleased

    private void TFCodProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFCodProdutoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            JTextField tfTextFiel;
            tfTextFiel = TFCodProduto;
            DLProdutos Produtos = new DLProdutos(null, true, tfTextFiel);
            Produtos.setVisible(true);
        }
    }//GEN-LAST:event_TFCodProdutoKeyPressed

    private void TFCodProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFCodProdutoFocusLost
        PosicionaProduto();
    }//GEN-LAST:event_TFCodProdutoFocusLost

    private void TFQtdeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFQtdeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            InserirProduto();
        }
    }//GEN-LAST:event_TFQtdeKeyPressed

    private void TBProdutosDeliveryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TBProdutosDeliveryKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            DeleteProdutoDelivery();
        }

        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            ConsultaObsItemDelivery();
        }
    }//GEN-LAST:event_TBProdutosDeliveryKeyPressed

    private void BTEntregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTEntregarActionPerformed
        EntregarDelivery();
    }//GEN-LAST:event_BTEntregarActionPerformed

    private void BTCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTCancelarActionPerformed
        CancelarDelivery();
    }//GEN-LAST:event_BTCancelarActionPerformed

    private void TFVlrTaxaEntregaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFVlrTaxaEntregaFocusLost
        CalculaValorPagar();
    }//GEN-LAST:event_TFVlrTaxaEntregaFocusLost

    private void TFVlrDescontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFVlrDescontoFocusLost
        CalculaValorPagar();
    }//GEN-LAST:event_TFVlrDescontoFocusLost

    private void TFVlrRecebidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFVlrRecebidoFocusLost
        CalculaValorPagar();
    }//GEN-LAST:event_TFVlrRecebidoFocusLost

    private void BTFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTFinalizarActionPerformed
        Recebimento();
    }//GEN-LAST:event_BTFinalizarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JTextField tfTextFiel;
        tfTextFiel = TFCodProduto;
        DLProdutos Produtos = new DLProdutos(null, true, tfTextFiel);
        Produtos.setVisible(true);
        PosicionaProduto();
}//GEN-LAST:event_jButton1ActionPerformed

    private void TFCodDeliveryFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFCodDeliveryFinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFCodDeliveryFinActionPerformed

    private void TF_DTIniFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TF_DTIniFocusGained
        TF_DTIni.selectAll();
}//GEN-LAST:event_TF_DTIniFocusGained

    private void TF_DTIniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TF_DTIniFocusLost
        if (TF_DTIni.getText().replaceAll("/", "").trim().equalsIgnoreCase("")) {
            TF_DTIni.setText("00000000");
        }
        PreencherJtableConsulta();
}//GEN-LAST:event_TF_DTIniFocusLost

    private void TF_DTFinFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TF_DTFinFocusGained
        TF_DTFin.selectAll();
}//GEN-LAST:event_TF_DTFinFocusGained

    private void TF_DTFinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TF_DTFinFocusLost
        if (TF_DTFin.getText().replaceAll("/", "").trim().equalsIgnoreCase("")) {
            TF_DTFin.setText("00000000");
        }
        PreencherJtableConsulta();
}//GEN-LAST:event_TF_DTFinFocusLost

    private void CBSituacaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBSituacaoItemStateChanged
        PreencherJtableConsulta();
    }//GEN-LAST:event_CBSituacaoItemStateChanged

    private void TFVlrTaxaEntregaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFVlrTaxaEntregaKeyReleased
        HabilitaCamposRecebimento();
    }//GEN-LAST:event_TFVlrTaxaEntregaKeyReleased

    private void TFVlrDescontoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFVlrDescontoKeyReleased
        HabilitaCamposRecebimento();
    }//GEN-LAST:event_TFVlrDescontoKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTCancelar;
    private javax.swing.JButton BTEntregar;
    private javax.swing.JButton BTFinalizar;
    private javax.swing.JButton BTLimpar;
    private javax.swing.JButton BTPequisaCliente;
    private javax.swing.JButton BT_FILTER;
    private javax.swing.JComboBox CBFormaPgto;
    private javax.swing.JComboBox CBSituacao;
    private javax.swing.JPanel FTFfiltro;
    private javax.swing.JLabel JLEmAguardo;
    private javax.swing.JLabel JLFinalizandoVenda;
    private javax.swing.JPanel JPCadastro;
    private javax.swing.JPanel JPPesquisa;
    private javax.swing.JPanel JPanelBtnLadoDireitoBaixo;
    private javax.swing.JLabel LBBairro;
    private javax.swing.JLabel LBCidade;
    private javax.swing.JLabel LBCodDeliverry;
    private javax.swing.JLabel LBCodProduto;
    private javax.swing.JLabel LBData;
    private javax.swing.JLabel LBDescSituacao;
    private javax.swing.JLabel LBDesconto;
    private javax.swing.JLabel LBDescricaoProduto;
    private javax.swing.JLabel LBEmTransporte;
    private javax.swing.JLabel LBFormaPgto;
    private javax.swing.JLabel LBNome;
    private javax.swing.JLabel LBNumero;
    private javax.swing.JLabel LBQtde;
    private javax.swing.JLabel LBRua;
    private javax.swing.JLabel LBTaxaEntrega;
    private javax.swing.JLabel LBTelefone;
    private javax.swing.JLabel LBTotalCompra;
    private javax.swing.JLabel LBTotalPago;
    private javax.swing.JLabel LBTroco;
    private javax.swing.JLabel LBUF;
    private javax.swing.JLabel LBValor;
    private javax.swing.JLabel LBValorPagar;
    private javax.swing.JTable TBDeliveryAguardando;
    private javax.swing.JTable TBDeliveryEmTransporte;
    private javax.swing.JTable TBProdutosDelivery;
    private javax.swing.JTextField TFBairro;
    private javax.swing.JTextField TFCidade;
    private javax.swing.JTextField TFCodDelivery;
    private Componentes.DKJTFInteger TFCodDeliveryFin;
    private Componentes.DKJTFInteger TFCodDeliveryIni;
    private Componentes.DKJTFInteger TFCodProduto;
    private javax.swing.JTextField TFDESCGERAL;
    private javax.swing.JTextField TFData;
    private javax.swing.JTextField TFDescricaoProduto;
    private javax.swing.JTextField TFNome;
    private javax.swing.JTextField TFNumero;
    private Componentes.DKJTFInteger TFQtde;
    private javax.swing.JTextField TFRua;
    private Componentes.DKJTFFone TFTelefone;
    private javax.swing.JTextField TFUF;
    private Componentes.DKJTFFloat TFValorUnit;
    private Componentes.DKJTFFloat TFVlrDesconto;
    private Componentes.DKJTFFloat TFVlrRecebido;
    private Componentes.DKJTFFloat TFVlrTaxaEntrega;
    private Componentes.DKJTFFloat TFVlrTotalBruto;
    private javax.swing.JTextField TFVlrTotalLiquido;
    private javax.swing.JTextField TFVlrTroco;
    private javax.swing.JFormattedTextField TF_DTFin;
    private javax.swing.JFormattedTextField TF_DTIni;
    private javax.swing.JTable TbPadrao;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanelEndereco;
    private javax.swing.JPanel jPanelInsereProduto;
    private javax.swing.JPanel jPanelLadoEsquerdo;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPanelJTableProdutos;
    private javax.swing.JScrollPane jScrollPanelJtableEmAguardo;
    private javax.swing.JScrollPane jScrollPanelJtableEmTransporte;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void SalvaDelivery() {
        if (TFCodDelivery.getText().isEmpty()) {
            String telefone = TFTelefone.getText().replace("(", "").replace(")", "").replace("-", "").trim();
            String id_cliente = "0";
            ResultSet rsCliente = FMaster.con.executeSQL("select count(*) as cont from dltelefonecliente where telefone = '" + telefone + "'");
            try {
                rsCliente.first();
                if (rsCliente.isFirst()) {
                    if (rsCliente.getInt("cont") > 1) {
                        DLClienteDelivery clienteDelivery = new DLClienteDelivery(null, closable, telefone);
                        clienteDelivery.setVisible(true);
                        id_cliente = clienteDelivery.id_cliente;
                    } else {
                        rsCliente = FMaster.con.executeSQL("select * from dltelefonecliente where telefone = '" + telefone + "'");
                        rsCliente.first();
                        if (rsCliente.isFirst()) {
                            id_cliente = rsCliente.getString("id_cliente");
                        }
                    }
                }
                rsCliente.close();
            } catch (SQLException ex) {
                Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (!id_cliente.equals("0")) {
                ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where id_delivery = 0");
                try {
                    int id_delivery = Utilitario.getSequencia("dldelivery", "id_delivery");
                    rsDelivery.first();
                    rsDelivery.moveToInsertRow();
                    rsDelivery.updateInt("id_delivery", id_delivery);
                    rsDelivery.updateInt("id_cliente", Integer.parseInt(id_cliente));
                    rsDelivery.updateString("telefone", TFTelefone.getText().replace("(", "").replace(")", "").replace("-", ""));
                    rsDelivery.updateInt("situacao", 1);
                    rsDelivery.updateTimestamp("data_delivery", (java.sql.Timestamp) Utilitario.getDateAndTimeAtual());
                    rsDelivery.insertRow();
                    PreencherHeder(id_delivery);
                    rsDelivery.close();
                    PreencherJtableDeliveryAguardando();
                    TFCodProduto.requestFocus();
                } catch (SQLException ex) {
                    Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((!TFTelefone.getText().isEmpty()) && (telefone.length() == 10)) {
                ResultSet rsContTel = FMaster.con.executeSQL("select count(*) as cont from dltelefonecliente where telefone = '" + telefone + "'");
                try {
                    rsContTel.first();
                    if (rsContTel.isFirst()) {
                        if (rsContTel.getInt("cont") >= 1) {
                            return;
                        }
                    }
                    rsContTel.close();
                } catch (SQLException ex) {
                    Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
                }



                int iresp = JOptionPane.showOptionDialog(null, "Não existe cliente cadastrado com esse telefone, deseja cadastrar um novo cliente com esse telefone?", "", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, //do not use a custom Icon
                        options, //the titles of buttons
                        options[0]); //default button title
                if (iresp == 0) {
                    ResultSet rsGravaCliente = FMaster.con.executeSQL("select * from dlcliente where id_cliente = 0");
                    try {
                        rsGravaCliente.first();
                        rsGravaCliente.moveToInsertRow();
                        rsGravaCliente.updateInt("id_cliente", Utilitario.getSequencia("dlcliente", "id_cliente"));
                        rsGravaCliente.insertRow();

                        IFCliente frameCliente = new IFCliente();
                        GetsSets.getJdesktopPanelViews().add(frameCliente);
                        frameCliente.setVisible(true);
                        frameCliente.prencherHeder(rsGravaCliente.getInt("id_cliente"));



                        ResultSet rsTelefone = FMaster.con.executeSQL("select * from dltelefonecliente where telefone = ''");
                        try {
                            rsTelefone.first();
                            rsTelefone.moveToInsertRow();
                            rsTelefone.updateInt("id_cliente", rsGravaCliente.getInt("id_cliente"));
                            rsTelefone.updateString("telefone", telefone);
                            rsTelefone.insertRow();
                            rsTelefone.close();
                            frameCliente.PreencherJtableTelefones();
                        } catch (SQLException ex) {
                            Logger.getLogger(IFCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        rsGravaCliente.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(IFCliente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    LimpaHeder();
                }
            }
        }
    }

    private void PreencherHeder(int id_delivery) {
        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery "
                + "inner join dlcliente on dldelivery.id_cliente = dlcliente.id_cliente where dldelivery.id_delivery = '" + id_delivery + "'");
        try {
            rsDelivery.first();
            if (rsDelivery.isFirst()) {
                TFCodDelivery.setText(rsDelivery.getString("id_delivery"));
                TFTelefone.setText(Utilitario.FormataFone(rsDelivery.getString("telefone")));
                TFNome.setText(rsDelivery.getString("nome"));
                TFCidade.setText(rsDelivery.getString("cidade"));
                TFUF.setText(rsDelivery.getString("uf"));
                TFBairro.setText(rsDelivery.getString("bairro"));
                TFNumero.setText(rsDelivery.getString("numero"));
                TFRua.setText(rsDelivery.getString("rua"));
                TFData.setText(Utilitario.FormatDate(rsDelivery.getDate("data_delivery")));
                if (rsDelivery.getInt("situacao") == 1) {
                    LBDescSituacao.setText("Aguardando");
                    LBDescSituacao.setForeground(new Color(0, 204, 51));
                }
                if (rsDelivery.getInt("situacao") == 2) {
                    LBDescSituacao.setText("Em transporte");
                    LBDescSituacao.setForeground(new Color(255, 0, 51));
                }
                if (rsDelivery.getInt("situacao") == 3) {
                    LBDescSituacao.setText("Finalizado a venda");
                    LBDescSituacao.setForeground(new Color(0, 51, 255));
                }
                if (rsDelivery.getInt("situacao") == 4) {
                    LBDescSituacao.setText("Cancelado");
                    LBDescSituacao.setForeground(new Color(0, 51, 255));
                }
                PreencherJtableProdutosDelivery();
            }
            rsDelivery.close();
            HabilitaCamposRecebimento();
            HabilitaBtnEntregar();
        } catch (SQLException ex) {
            Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void LimpaHeder() {
        TFNome.setText("");
        TFCidade.setText("");
        TFUF.setText("");
        TFBairro.setText("");
        TFNumero.setText("");
        TFRua.setText("");
        TFCodDelivery.setText("");
        TFTelefone.setText("");
        TFCodProduto.setText("");
        TFDescricaoProduto.setText("");
        TFValorUnit.setText("");
        TFQtde.setText("");
        LBDescSituacao.setText("...");
        TFData.setText("");
        TFVlrTotalLiquido.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
        TFVlrTotalBruto.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
        TFVlrTaxaEntrega.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
        TFVlrTroco.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
    }

    private void PreencherJtableDeliveryAguardando() {
        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery "
                + "inner join dlcliente on dldelivery.id_cliente = dlcliente.id_cliente where dldelivery.situacao = 1");
        DefaultTableModel modelo = (DefaultTableModel) TBDeliveryAguardando.getModel();
        modelo.setNumRows(0);
        try {
            while (rsDelivery.next()) {
                modelo.addRow(new Object[]{rsDelivery.getInt("id_delivery"), rsDelivery.getString("nome")});
            }
            rsDelivery.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFProduto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void PreencherJtableDeliveryEmTransporte() {
        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery "
                + "inner join dlcliente on dldelivery.id_cliente = dlcliente.id_cliente where dldelivery.situacao = 2");
        DefaultTableModel modelo = (DefaultTableModel) TBDeliveryEmTransporte.getModel();
        modelo.setNumRows(0);
        try {
            while (rsDelivery.next()) {
                modelo.addRow(new Object[]{rsDelivery.getInt("id_delivery"), rsDelivery.getString("nome")});
            }
            rsDelivery.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFProduto.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void PosicionaProduto() {
        if (!TFCodProduto.getText().isEmpty()) {
            ResultSet rsProduto = FMaster.con.executeSQL("select * from estproduto where id_produto = '" + TFCodProduto.getText() + "' and tipo_produto = 1");
            try {
                rsProduto.first();
                if (rsProduto.isFirst()) {
                    TFDescricaoProduto.setText(rsProduto.getString("descricao"));
                    TFValorUnit.setText(Utilitario.getFomatDecimal(rsProduto.getFloat("vlr_unitario")));
                }
                rsProduto.close();
            } catch (SQLException ex) {
                Logger.getLogger(DLCadProdComanda.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            TFDescricaoProduto.setText("");
        }
    }

    private void InserirProduto() {
        if (TFCodDelivery.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe um produto!", "Alerta", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (TFValorUnit.getText().isEmpty() || TFValorUnit.getText().equals("0,00")) {
            JOptionPane.showMessageDialog(null, "Informe o valor do produto!", "Alerta", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (TFQtde.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe a quantidade!", "Alerta", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String id_delivery = TFCodDelivery.getText().isEmpty() ? "0" : TFCodDelivery.getText();
        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where id_delivery = '" + id_delivery + "'");
        try {
            rsDelivery.first();
            if (rsDelivery.isFirst()) {
                if (rsDelivery.getInt("situacao") == 2) {
                    JOptionPane.showMessageDialog(null, "Produto não pode ser inserido, delivery esta a entregar!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (rsDelivery.getInt("situacao") == 3) {
                    JOptionPane.showMessageDialog(null, "Produto não pode ser inserido, delivery já finalizada a venda!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (rsDelivery.getInt("situacao") == 4) {
                    JOptionPane.showMessageDialog(null, "Produto não pode ser inserido, delivery cancelada!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            rsDelivery.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!TFCodDelivery.getText().isEmpty()) {

            JTextArea jtfObsItemDelivery = new JTextArea();
            DLObsItemDelivery obsItem = new DLObsItemDelivery(null, jtfObsItemDelivery, 0, closable);
            obsItem.setVisible(true);

            System.out.println(jtfObsItemDelivery.getText());
            ResultSet rsItemDelivery = FMaster.con.executeSQL("select * from dldeliveryitens where id_deliveryitem = 0");
            try {
                rsItemDelivery.first();
                rsItemDelivery.moveToInsertRow();
                rsItemDelivery.updateInt("id_deliveryitem", Utilitario.getSequencia("dldeliveryitens", "id_deliveryitem"));
                rsItemDelivery.updateInt("id_delivery", Integer.parseInt(TFCodDelivery.getText().isEmpty() ? "0" : TFCodDelivery.getText()));
                rsItemDelivery.updateInt("id_produto", Integer.parseInt(TFCodProduto.getText().isEmpty() ? "0" : TFCodProduto.getText()));
                rsItemDelivery.updateInt("qtde", Integer.parseInt(TFQtde.getText().isEmpty() ? "0" : TFQtde.getText()));
                rsItemDelivery.updateFloat("vlr_unit", Float.parseFloat(TFValorUnit.getText().isEmpty() ? "0" : TFValorUnit.getText().replace(",", ".")));
                rsItemDelivery.updateFloat("vlr_total", (Integer.parseInt(TFQtde.getText().isEmpty() ? "0" : TFQtde.getText()) * Float.parseFloat(TFValorUnit.getText().isEmpty() ? "0" : TFValorUnit.getText().replace(",", "."))));
                rsItemDelivery.updateString("observacao", jtfObsItemDelivery.getText());
                rsItemDelivery.insertRow();
                rsItemDelivery.close();
                PreencherJtableProdutosDelivery();
                TFCodProduto.setText("");
                TFDescricaoProduto.setText("");
                TFQtde.setText("");
                TFValorUnit.setText("");
                TFCodProduto.requestFocus();
            } catch (SQLException ex) {
                Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void PreencherJtableProdutosDelivery() {
        String id_delivery = TFCodDelivery.getText().isEmpty() ? "0" : TFCodDelivery.getText();
        ResultSet rsProdutosDelivery = FMaster.con.executeSQL("select * from dldeliveryitens "
                + "inner join estproduto on dldeliveryitens.id_produto = estproduto.id_produto where dldeliveryitens.id_delivery = '" + id_delivery + "' order by descricao");
        DefaultTableModel modelo = (DefaultTableModel) TBProdutosDelivery.getModel();
        modelo.setNumRows(0);
        try {
            while (rsProdutosDelivery.next()) {
                modelo.addRow(new Object[]{rsProdutosDelivery.getString("id_delivery"), rsProdutosDelivery.getString("id_deliveryitem"), rsProdutosDelivery.getString("descricao"), rsProdutosDelivery.getString("qtde"), Utilitario.getFomatDecimal(rsProdutosDelivery.getFloat("vlr_unit")), Utilitario.getFomatDecimal(rsProdutosDelivery.getFloat("vlr_total"))});
            }
            rsProdutosDelivery.close();

            ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where id_delivery = '" + id_delivery.trim() + "'");
            rsDelivery.first();
            if (rsDelivery.isFirst()) {
                if (rsDelivery.getInt("situacao") == 1) {
                }
            }
            SomaTotalPagar();
            CalculaValorPagar();
        } catch (SQLException ex) {
            Logger.getLogger(IFProduto.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void DeleteProdutoDelivery() {
        String descricaoProduto = Utilitario.getValueColumn("Descrição do Produto", TBProdutosDelivery);
        String id_deliveryitem = Utilitario.getValueColumn("id_deliveryitem", TBProdutosDelivery);
        String id_delivery = Utilitario.getValueColumn("id_delivery", TBProdutosDelivery);

        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where id_delivery = '" + id_delivery + "'");
        try {
            rsDelivery.first();
            if (rsDelivery.isFirst()) {
                if (rsDelivery.getInt("situacao") == 2) {
                    JOptionPane.showMessageDialog(null, "Produto não pode ser excluido, delivery esta a entregar!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (rsDelivery.getInt("situacao") == 3) {
                    JOptionPane.showMessageDialog(null, "Produto não pode ser excluido, delivery já finalizada a venda!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (rsDelivery.getInt("situacao") == 4) {
                    JOptionPane.showMessageDialog(null, "Produto não pode ser excluido, delivery cancelada!", "Alerta", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            rsDelivery.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }
        int iresp = JOptionPane.showOptionDialog(null, "Deseja excluir?\n" + "Produto:" + descricaoProduto.trim(), "", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options, //the titles of buttons
                options[0]); //default button title
        if (iresp == 0) {
            FMaster.con.executeUpdate("delete from dldeliveryitens where id_deliveryitem = '" + id_deliveryitem + "'");
            PreencherJtableProdutosDelivery();
        }

    }

    private void HabilitaCamposRecebimento() {
        float vlrTaxaEntega = Float.parseFloat(TFVlrTaxaEntrega.getText().isEmpty() ? "0" : TFVlrTaxaEntrega.getText().replace(",", "."));
        float vlrDesconto = Float.parseFloat(TFVlrDesconto.getText().isEmpty() ? "0" : TFVlrDesconto.getText().replace(",", "."));
        if ((Utilitario.getValueColumn("Código Delivery", TBDeliveryEmTransporte).trim().equals(TFCodDelivery.getText().trim())) && (TBDeliveryEmTransporte.getSelectedRow() != -1)) {
            if (vlrTaxaEntega == 0 && vlrDesconto == 0) {
                TFVlrTaxaEntrega.setEnabled(true);
                TFVlrDesconto.setEnabled(true);
            }
            if (vlrTaxaEntega != 0 && vlrDesconto == 0) {
                TFVlrTaxaEntrega.setEnabled(true);
                TFVlrDesconto.setEnabled(false);
            }
            if (vlrTaxaEntega == 0 && vlrDesconto != 0) {
                TFVlrTaxaEntrega.setEnabled(false);
                TFVlrDesconto.setEnabled(true);
            }

            CBFormaPgto.setEnabled(true);
            TFVlrRecebido.setEnabled(true);
            TFVlrTroco.setEnabled(true);
            BTFinalizar.setEnabled(true);
        } else {
            TFVlrTaxaEntrega.setEnabled(false);
            TFVlrDesconto.setEnabled(false);
            CBFormaPgto.setEnabled(false);
            TFVlrRecebido.setEnabled(false);
            TFVlrTroco.setEnabled(false);
            BTFinalizar.setEnabled(false);

            // TFVlrTaxaEntrega.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
            TFVlrDesconto.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
            TFVlrRecebido.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
            //TFVlrTroco.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
            // TFVlrTotalLiquido.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
            // TFVlrTotalBruto.setText(Utilitario.getFomatDecimal(Float.parseFloat("0")));
        }

    }

    private void HabilitaBtnEntregar() {
        if ((Utilitario.getValueColumn("Código Delivery", TBDeliveryAguardando).trim().equals(TFCodDelivery.getText().trim())) && (TBDeliveryAguardando.getSelectedRow() != -1)) {

            BTEntregar.setEnabled(true);
        } else {
            BTEntregar.setEnabled(false);
        }
    }

    private void EntregarDelivery() {
        String id_delivery = Utilitario.getValueColumn("Código Delivery", TBDeliveryAguardando).trim();
        String nomeCliente = Utilitario.getValueColumn("Cliente", TBDeliveryAguardando).trim();
        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where dldelivery.situacao = 1 and id_delivery = '" + id_delivery + "'");
        try {
            rsDelivery.first();
            if (rsDelivery.isFirst()) {
                int iresp = JOptionPane.showOptionDialog(null, "Deseja fazer a entrega a esse Cliente?\nNome: " + nomeCliente + "", "", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, //do not use a custom Icon
                        options, //the titles of buttons
                        options[0]); //default button title
                if (iresp == 0) {
                    rsDelivery.updateInt("situacao", 2);
                    rsDelivery.updateRow();
                } else {
                    return;
                }
                rsDelivery.close();
                PreencherJtableDeliveryEmTransporte();
                PreencherJtableDeliveryAguardando();
            }
        } catch (SQLException ex) {
            Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void CancelarDelivery() {
        String id_delivery = TFCodDelivery.getText().isEmpty() ? "0" : TFCodDelivery.getText();
        if (!id_delivery.equals("0")) {
            ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where id_delivery = '" + id_delivery + "'");
            try {
                rsDelivery.first();
                if (rsDelivery.isFirst()) {
                    if (rsDelivery.getInt("situacao") > 2) {
                        JOptionPane.showMessageDialog(null, "Delivery não pode ser Cancelado!", "Alerta", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    int iresp = JOptionPane.showOptionDialog(null, "Deseja cancelar o Delivery?\nCódigo: " + id_delivery + "", "", JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null, //do not use a custom Icon
                            options, //the titles of buttons
                            options[0]); //default button title
                    if (iresp == 0) {
                        rsDelivery.updateInt("situacao", 4);
                        rsDelivery.updateRow();
                    } else {
                        return;
                    }

                    rsDelivery.close();
                    PreencherJtableDeliveryEmTransporte();
                    PreencherJtableDeliveryAguardando();
                    PreencherHeder(Integer.parseInt(id_delivery));
                }
            } catch (SQLException ex) {
                Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void SomaTotalPagar() {
        String id_delivery = TFCodDelivery.getText().isEmpty() ? "0" : TFCodDelivery.getText();
        float vlrDesconto = Float.parseFloat(TFVlrDesconto.getText().isEmpty() ? "0" : TFVlrDesconto.getText().replace(",", "."));
        ResultSet rsSomaVlrTotal = FMaster.con.executeSQL("select sum(vlr_total) as vlr_total from dldeliveryitens where id_delivery = '" + id_delivery + "'");
        try {
            rsSomaVlrTotal.first();
            if (rsSomaVlrTotal.isFirst()) {
                TFVlrTotalBruto.setText(Utilitario.getFomatDecimal(rsSomaVlrTotal.getFloat("vlr_total")));
            }
            rsSomaVlrTotal.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }

        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery "
                + "inner join dlcliente on dldelivery.id_cliente = dlcliente.id_cliente where dldelivery.id_delivery = '" + id_delivery + "'");
        try {
            rsDelivery.first();
            if (rsDelivery.first()) {
                if (rsDelivery.getInt("id_regiao") == 0) {
                    if (vlrDesconto == 0) {
                        TFVlrTaxaEntrega.setText(Utilitario.getFomatDecimal(rsDelivery.getFloat("taxa_entrega")));
                    }
                } else {
                    ResultSet rsRegiaoEntrega = FMaster.con.executeSQL("select * from dlregiao where id_regiao = " + rsDelivery.getInt("id_regiao"));
                    rsRegiaoEntrega.first();
                    if (rsRegiaoEntrega.isFirst()) {
                        if (vlrDesconto == 0) {
                            TFVlrTaxaEntrega.setText(Utilitario.getFomatDecimal(rsRegiaoEntrega.getFloat("taxa_entrega")));
                        }
                    }
                    rsRegiaoEntrega.close();
                }

            }
            rsDelivery.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void CalculaValorPagar() {
        float vlrTotalCompra = Float.parseFloat(TFVlrTotalBruto.getText().replace(",", "."));
        float vlrTaxaEntega = Float.parseFloat(TFVlrTaxaEntrega.getText().replace(",", "."));
        float vlrDesconto = Float.parseFloat(TFVlrDesconto.getText().replace(",", "."));
        float vlrTotalPago = Float.parseFloat(TFVlrRecebido.getText().replace(",", "."));

        TFVlrTroco.setText(Utilitario.getFomatDecimal(vlrTotalPago - ((vlrTotalCompra + vlrTaxaEntega) - vlrDesconto)));
        TFVlrTotalLiquido.setText(Utilitario.getFomatDecimal(((vlrTotalCompra + vlrTaxaEntega) - vlrDesconto)));

//        if (vlrDesconto == 0 && vlrTaxaEntega == 0) {
//            TFVlrDesconto.setEnabled(true);
//            TFVlrTaxaEntrega.setEnabled(true);
//        }
//        if (vlrDesconto != 0 && vlrTaxaEntega == 0) {
//            TFVlrDesconto.setEnabled(true);
//            TFVlrTaxaEntrega.setEnabled(false);
//        }
//        if (vlrDesconto == 0 && vlrTaxaEntega != 0) {
//            TFVlrDesconto.setEnabled(false);
//            TFVlrTaxaEntrega.setEnabled(true);
//        }
    }

    private void Recebimento() {
        Object[] options = {"Sim", "Não"};
        float vlrTotalBruto = Float.parseFloat(TFVlrTotalBruto.getText().isEmpty() ? "0" : TFVlrTotalBruto.getText().replace(",", "."));
        float vlrTaxaEntrega = Float.parseFloat(TFVlrTaxaEntrega.getText().isEmpty() ? "0" : TFVlrTaxaEntrega.getText().replace(",", "."));
        float vlrDesconto = Float.parseFloat(TFVlrDesconto.getText().isEmpty() ? "0" : TFVlrDesconto.getText().replace(",", "."));
        float vlrTotalLiquido = Float.parseFloat(TFVlrTotalLiquido.getText().isEmpty() ? "0" : TFVlrTotalLiquido.getText().replace(",", "."));
        float vlrRecebido = Float.parseFloat(TFVlrRecebido.getText().isEmpty() ? "0" : TFVlrRecebido.getText().replace(",", "."));
        float vlrTroco = Float.parseFloat(TFVlrTroco.getText().isEmpty() ? "0" : TFVlrTroco.getText().replace(",", "."));



        /*Verifica se foi informado o valor de pagamento*/
        if (vlrTotalBruto == 0) {
            JOptionPane.showMessageDialog(null, "Não há valor a ser recebido!", "Alerta", JOptionPane.ERROR_MESSAGE);
            return;
        }
        /*Verifica se existe troco*/
        if (vlrTroco < 0) {
            JOptionPane.showMessageDialog(null, "Valores inválidos", "Alerta", JOptionPane.ERROR_MESSAGE);
            return;
        }

        /*Verifica se existe caixa aberto, se returnar 0 é porque não existe caixa aberto*/
        int existe = Utilitario.VerExisteCaixaAberto();
        if (existe == 0) {
            return;
        }

        String htmlmsg = "<html>"
                + "<body>"
                + "	<table border = 0>"
                + "     <Caption Align=Bottom> <Font Size=10></Font> </Caption>"
                + "         <tr>"
                + "             <th colspan=2 color = red>"
                + "                 <Font size=6>"
                + "                     Confirma os seguintes valores de recebimento abaixo?"
                + "                 </Font>"
                + "             </th>"
                + "         </tr>"
                + "         <tr>"
                + "             <td>"
                + "                 <Font size=4>"
                + "                     Total da compra é:---------------------------------------------------------------------------"
                + "                 </Font>"
                + "             </td>"
                + "             <td align=right color = blue>"
                + "                 <Font size=4>"
                + "                     " + Utilitario.getFomatDecimal(vlrTotalBruto) + "	"
                + "                 </Font>"
                + "             </td>"
                + "         </tr>"
                + "         <tr>"
                + "             <td>"
                + "                 <Font size=4>"
                + "                     Valor de acréscimo é:------------------------------------------------------------------------"
                + "                 </Font>"
                + "             </td>"
                + "             <td align=right color = blue>"
                + "                 <Font size=4>"
                + "                     " + Utilitario.getFomatDecimal(vlrTaxaEntrega) + ""
                + "                 </Font>"
                + "             </td>"
                + "         </tr>"
                + "         <tr>"
                + "             <td>"
                + "                 <Font size=4>"
                + "                     Valor de desconto é:-------------------------------------------------------------------------"
                + "                 </Font>"
                + "     	</td>"
                + "		<td align=right color = blue>"
                + "                 <Font size=4>"
                + "			" + Utilitario.getFomatDecimal(vlrDesconto) + ""
                + "                 </Font>"
                + "             </td>"
                + "         </tr>"
                + "         <tr>"
                + "             <td>"
                + "                 <Font size=6>"
                + "                     Valor a ser pago é:--------------------------------"
                + "                 </Font>"
                + "             </td>"
                + "             <td align=right color = blue>"
                + "                 <Font size=6>"
                + "                     " + Utilitario.getFomatDecimal(vlrTotalLiquido) + ""
                + "                 </Font>"
                + "             </td>"
                + "         </tr>"
                + "         <tr>"
                + "             <td>"
                + "                 <Font size=6>"
                + "                     Valor recebido é:-----------------------------------"
                + "                 </Font>"
                + "             </td>"
                + "             <td align=right color = blue>"
                + "                 <Font size=6>"
                + "                     " + Utilitario.getFomatDecimal(vlrRecebido) + ""
                + "                 </Font>"
                + "             </td>"
                + "         </tr>"
                + "         <tr>"
                + "             <td>"
                + "                 <Font size=6>"
                + "                     Valor de troco é:-----------------------------------"
                + "                 </Font>"
                + "             </td>"
                + "             <td align=right color = blue>"
                + "                 <Font size=6>"
                + "                     " + Utilitario.getFomatDecimal(vlrTroco) + ""
                + "                 </Font>"
                + "             </td>"
                + "         </tr>"
                + "     </table>"
                + "</body>"
                + "</html>";

        int iresp = JOptionPane.showOptionDialog(null, htmlmsg, "", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options, //the titles of buttons
                options[0]); //default button title

        if (iresp != 0) {
            return;
        }

        String id_delivery = TFCodDelivery.getText().isEmpty() ? "0" : TFCodDelivery.getText();
        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where id_delivery = '" + id_delivery + "'");
        try {
            rsDelivery.first();
            if (rsDelivery.isFirst()) {

                rsDelivery.updateFloat("vlr_bruto", vlrTotalBruto);
                rsDelivery.updateFloat("vlr_taxa_entrega", vlrTaxaEntrega);
                rsDelivery.updateFloat("vlr_desconto", vlrDesconto);
                rsDelivery.updateFloat("vlr_liquido", vlrTotalLiquido);
                rsDelivery.updateFloat("vlr_recebido", vlrRecebido);
                rsDelivery.updateFloat("vlr_troco", vlrTroco);
                rsDelivery.updateFloat("situacao", 3);
                rsDelivery.updateRow();

                /*Lança o valor recebido no movimento de caixa*/
                MovimentoCaixa.LancaMovimento(vlrRecebido, 0,
                        Integer.parseInt(id_delivery),
                        CBFormaPgto.getSelectedIndex() + 1,
                        1,
                        Utilitario.getDateAndTimeAtual(),
                        2);

                /*Lança o valor de troco no movimento de caixa*/
                MovimentoCaixa.LancaMovimento(vlrTroco, 0,
                        Integer.parseInt(id_delivery),
                        1,
                        2,
                        Utilitario.getDateAndTimeAtual(),
                        1);

                /*atualiza estoque*/
                ResultSet rsAtualizaEstoque = FMaster.con.executeSQL("select * from dldeliveryitens where id_delivery = '" + id_delivery + "'");
                while (rsAtualizaEstoque.next()) {
                    ResultSet rsProdutoItem = FMaster.con.executeSQL("select * from estitemproduto where id_produto = '" + rsAtualizaEstoque.getInt("id_produto") + "'");
                    while (rsProdutoItem.next()) {
                        for (int i = 1; i <= rsAtualizaEstoque.getInt("qtde"); i++) {
                            MovimentoEstoque.AtualizaSaldoProduto(2, rsProdutoItem.getInt("id_itemproduto"), rsProdutoItem.getFloat("qtde"));
                        }
                    }
                    rsProdutoItem.close();
                }
                rsAtualizaEstoque.close();

                PreencherHeder(Integer.parseInt(id_delivery));
                PreencherJtableDeliveryEmTransporte();
                HabilitaCamposRecebimento();

                if (rsDelivery.getInt("situacao") == 3) {

                    int imprimirCF = 0;
                    ResultSet rsConfiguracao = FMaster.con.executeSQL("select * from atnconfigecf");
                    rsConfiguracao.first();
                    if (rsConfiguracao.isFirst()) {
                        imprimirCF = rsConfiguracao.getInt("imprimir_cf");
                    }
                    rsConfiguracao.close();

                    if (imprimirCF == 1) {
                        int iresp2 = JOptionPane.showOptionDialog(null, "Deseja imprimir o Cupom Fiscal?", "", JOptionPane.YES_NO_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null, //do not use a custom Icon
                                options, //the titles of buttons
                                options[0]); //default button title

                        if (iresp2 == 0) {
                            ImprimirCupomFiscal();
                        }
                    }
                    int iresp3 = JOptionPane.showOptionDialog(null, "Deseja imprimir o Cupom Não Fiscal?", "", JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null, //do not use a custom Icon
                            options, //the titles of buttons
                            options[0]); //default button title
                    if (iresp3 == 0) {
                        PrintRel.imprime("CupomNaoFiscalDelivery.jasper", Integer.parseInt(id_delivery));
                    }
                }
            }
            rsDelivery.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void PreencherJtableConsulta() {
        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery inner join dlcliente on dldelivery.id_cliente = dlcliente.id_cliente " + Filtra() + " order by id_delivery");
        try {
            DefaultTableModel modelo = (DefaultTableModel) TbPadrao.getModel();
            modelo.setNumRows(0);
            while (rsDelivery.next()) {
                String situacao = "";

                if (rsDelivery.getInt("situacao") == 1) {
                    situacao = "Aguardando";
                }
                if (rsDelivery.getInt("situacao") == 2) {
                    situacao = "Em transporte";
                }
                if (rsDelivery.getInt("situacao") == 3) {
                    situacao = "Finalizado a venda";
                }
                if (rsDelivery.getInt("situacao") == 4) {
                    situacao = "Cancelado";
                }
                String cliente = "";
                ResultSet rsCliente = FMaster.con.executeSQL("select * from dlcliente where id_cliente = '" + rsDelivery.getString("id_cliente") + "'");
                rsCliente.first();
                if (rsCliente.isFirst()) {
                    cliente = rsCliente.getString("nome");
                }
                modelo.addRow(new Object[]{rsDelivery.getString("id_delivery"),
                            cliente,
                            Utilitario.FormataFone(rsDelivery.getString("telefone")),
                            situacao,
                            Utilitario.FormatDate(rsDelivery.getDate("data_delivery")),
                            Utilitario.getFomatDecimal(rsDelivery.getFloat("vlr_bruto")),
                            Utilitario.getFomatDecimal(rsDelivery.getFloat("vlr_taxa_entrega")),
                            Utilitario.getFomatDecimal(rsDelivery.getFloat("vlr_desconto")),
                            Utilitario.getFomatDecimal(rsDelivery.getFloat("vlr_liquido"))});
            }
            rsDelivery.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String Filtra() {
        String deliveryIni;
        String deliveryFin;
        Date dDtIni;
        Date dDtFin;
        String situacao;
        String filtro = "";
        String descricao = TFDESCGERAL.getText().isEmpty() ? "" : TFDESCGERAL.getText();

        deliveryIni = TFCodDeliveryIni.getText().isEmpty() ? "0" : TFCodDeliveryIni.getText();
        deliveryFin = TFCodDeliveryFin.getText().isEmpty() ? "0" : TFCodDeliveryFin.getText();
        dDtIni = (java.sql.Date) Utilitario.getPegaDataSql(TF_DTIni.getText().equals("00/00/0000") ? "" : (TF_DTIni.getText()));
        dDtFin = (java.sql.Date) Utilitario.getPegaDataSql(TF_DTFin.getText().equals("00/00/0000") ? "" : (TF_DTFin.getText()));
        situacao = String.valueOf(CBSituacao.getSelectedIndex());

        if (!deliveryIni.equals("0")) {
            if (filtro.equals("")) {
                filtro = " where id_delivery >= '" + deliveryIni + "'";
            }
        }
        if (!deliveryFin.equals("0")) {
            if (filtro.equals("")) {
                filtro = " where id_delivery <= '" + deliveryFin + "'";
            } else {
                filtro = filtro + " and id_delivery <= '" + deliveryFin + "'";
            }
        }

        if (dDtIni != null) {
            if (filtro.equals("")) {
                filtro = " where cast(data_delivery as date) >= '" + dDtIni + "'";
            } else {
                filtro = filtro + " and cast(data_delivery as date) >= '" + dDtIni + "'";
            }
        }
        if (dDtFin != null) {
            if (filtro.equals("")) {
                filtro = " where cast(data_delivery as date) <= '" + dDtFin + "'";
            } else {
                filtro = filtro + " and cast(data_delivery as date) <= '" + dDtFin + "'";
            }
        }
        if (!situacao.equals("0")) {
            if (filtro.equals("")) {
                filtro = " where situacao = '" + situacao + "'";
            } else {
                filtro = filtro + " and situacao = '" + situacao + "'";
            }
        }
        if (!descricao.equals("")) {
            if (filtro.equals("")) {
                filtro = " where Upper(nome) like '%" + descricao.toUpperCase() + "%'";
            } else {
                filtro = filtro + " and Upper(nome) like '%" + descricao.toUpperCase() + "%'";
            }
        }
        return filtro;
    }

    private void posicionaDelivery() {
        String id_delivery = Utilitario.getValueColumn("Delivery", TbPadrao);
        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldelivery where id_delivery = '" + id_delivery + "'");
        try {
            rsDelivery.first();
            if (rsDelivery.isFirst()) {
                PreencherHeder(rsDelivery.getInt("id_delivery"));
                jTabbedPane1.setSelectedIndex(0);
            }
            rsDelivery.close();
        } catch (SQLException ex) {
            Logger.getLogger(IFComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ConsultaObsItemDelivery() {
        String id_delivery = Utilitario.getValueColumn("id_delivery", TBProdutosDelivery);
        String id_deliveryitem = Utilitario.getValueColumn("id_deliveryitem", TBProdutosDelivery);

        ResultSet rsDelivery = FMaster.con.executeSQL("select * from dldeliveryitens inner join dldelivery on dldelivery.id_delivery = dldeliveryitens.id_delivery where dldeliveryitens.id_delivery = '" + id_delivery + "' and dldeliveryitens.id_deliveryitem = '" + id_deliveryitem + "'");
        try {
            rsDelivery.first();
            if (rsDelivery.isFirst()) {
                int situacao = rsDelivery.getInt("situacao");

                JTextArea jtfObsItemDelivery = new JTextArea();
                jtfObsItemDelivery.setText(rsDelivery.getString("observacao"));
                DLObsItemDelivery obsItem = new DLObsItemDelivery(null, jtfObsItemDelivery, situacao, closable);
                obsItem.setVisible(true);
                if (situacao == 1) {
                    FMaster.con.executeUpdate("update dldeliveryitens set observacao = '" + jtfObsItemDelivery.getText() + "' where id_delivery = '" + id_delivery + "' and id_deliveryitem = '" + id_deliveryitem + "'");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(IFDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ImprimirCupomFiscal() {
        String formaPagamento = "";
        if (CBFormaPgto.getSelectedIndex() == 0) {
            formaPagamento = "Dinheiro";
        }
        if (CBFormaPgto.getSelectedIndex() == 1) {
            formaPagamento = "Cartão";
        }
        if (CBFormaPgto.getSelectedIndex() == 2) {
            formaPagamento = "Cartão";
        }
        if (CBFormaPgto.getSelectedIndex() == 3) {
            formaPagamento = "Cheque";
        }

        String Aliquota = "";
        ResultSet rsAliquota = FMaster.con.executeSQL("select * from atnconfigecf");
        try {
            rsAliquota.first();
            if (rsAliquota.isFirst()) {
                Aliquota = rsAliquota.getString("vlr_aliquota");
            }
        } catch (SQLException ex) {
            Logger.getLogger(DLRecebimentoComanda.class.getName()).log(Level.SEVERE, null, ex);
        }


        String id_delivery = TFCodDelivery.getText().isEmpty() ? "0" : TFCodDelivery.getText();
        ResultSet rsDeliv = FMaster.con.executeSQL("select * from dldelivery where id_delivery = '" + id_delivery + "'");
        try {
            rsDeliv.first();
            if (rsDeliv.isFirst()) {
                String TipoAcrescimoDesconto = "$";
                String sAcrescimoDesconto = "D";
                String ValorAcrescimoDesconto = "0";
                float fAcrescimoDesconto = rsDeliv.getFloat("vlr_desconto");
                if (fAcrescimoDesconto != 0) {
                    sAcrescimoDesconto = "D";
                    ValorAcrescimoDesconto = Utilitario.getFomatDecimal(fAcrescimoDesconto);
                }
                fAcrescimoDesconto = rsDeliv.getFloat("vlr_taxa_entrega");
                if (fAcrescimoDesconto != 0) {
                    sAcrescimoDesconto = "A";
                    ValorAcrescimoDesconto = Utilitario.getFomatDecimal(fAcrescimoDesconto);
                }
                //if (!TFVlrDesconto.getText().isEmpty() || TFVlrDesconto.getText().equals("0,00"))
                ResultSet rsItemDelivery = FMaster.con.executeSQL("SELECT * from dldeliveryitens inner join estproduto on dldeliveryitens.id_produto = estproduto.id_produto where dldeliveryitens.id_delivery = '" + id_delivery + "'");
                rsItemDelivery.first();
                if (rsItemDelivery.isFirst()) {
                    BemaECF.abreCupom();
                    do {
                        if (BemaECF.iRet == 0) {
                            BemaECF.vendeItem(rsItemDelivery.getString("id_produto"), rsItemDelivery.getString("descricao"), Aliquota, "I", rsItemDelivery.getString("qtde"), 2, Utilitario.getFomatDecimal(rsItemDelivery.getFloat("vlr_unit")), "$", "00000000");
                        }
                    } while (rsItemDelivery.next());
                    if (BemaECF.iRet == 0) {
                        FMaster.con.executeUpdate("update dldelivery set gerado_cf = 1 where dldelivery.id_delivery = '" + id_delivery + "'");
                    }
                    BemaECF.fechaCupom(sAcrescimoDesconto, TipoAcrescimoDesconto, ValorAcrescimoDesconto, "Delivery de número: " + rsDeliv.getInt("id_delivery"), formaPagamento, Utilitario.getFomatDecimal(rsDeliv.getFloat("vlr_recebido")));
                    Utilitario.SalvaUltimoCFGeradoDelivery(rsDeliv.getInt("id_delivery"));
                }
                rsItemDelivery.close();
            }
            rsDeliv.close();
        } catch (SQLException ex) {
            Logger.getLogger(DLRecebimentoComanda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
